{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 9163de244ce60fdae832","webpack:///./src/js-joda.js","webpack:///./src/LocalDate.js","webpack:///./src/assert.js","webpack:///./src/MathUtil.js","webpack:///./src/errors.js","webpack:///./~/es6-error/dist/index.js","webpack:///./src/chrono/IsoChronology.js","webpack:///./src/temporal/ChronoField.js","webpack:///./src/temporal/ValueRange.js","webpack:///./src/Year.js","webpack:///./src/Clock.js","webpack:///./src/Instant.js","webpack:///./src/LocalTime.js","webpack:///./src/ZoneOffset.js","webpack:///./src/Month.js"],"names":[],"mappings":"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","file":"js-joda.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jsjoda\"] = factory();\n\telse\n\t\troot[\"jsjoda\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 9163de244ce60fdae832\n **/","export { LocalDate } from './LocalDate';\nexport { Instant } from './Instant';\nexport { Clock } from './Clock';\nexport { ZoneOffset } from './ZoneOffset';\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/js-joda.js\n **/","import {assert} from './assert';\n\nimport { MathUtil } from './MathUtil';\nimport {DateTimeException} from './errors';\n\nimport { IsoChronology } from './chrono/IsoChronology';\nimport {DAY_OF_MONTH, MONTH_OF_YEAR, YEAR } from './temporal/ChronoField';\n\nimport {Clock} from './Clock';\nimport {Month} from './Month';\nimport {Year} from './Year';\nimport {LocalTime} from './LocalTime';\n\n/**\n * The number of days in a 400 year cycle.\n */\nconst  DAYS_PER_CYCLE = 146097;\n\n\n  /**\n   * The number of days from year zero to year 1970.\n   * There are five 400 year cycles from year zero to 2000.\n   * There are 7 leap years from 1970 to 2000.\n   */\nconst  DAYS_0000_TO_1970 = (DAYS_PER_CYCLE * 5) - (30 * 365 + 7);\n\n/**\n * A date without a time-zone in the ISO-8601 calendar system,\n * such as 2007-12-03.\n *\n * LocalDate is an immutable date-time object that represents a date,\n * often viewed as year-month-day. Other date fields, such as day-of-year,\n * day-of-week and week-of-year, can also be accessed.\n * For example, the value \"2nd October 2007\" can be stored in a LocalDate.\n *\n * This class does not store or represent a time or time-zone.\n * Instead, it is a description of the date, as used for birthdays.\n * It cannot represent an instant on the time-line without additional information\n * such as an offset or time-zone.\n */\n\nexport class LocalDate {\n\n    /**\n     *\n     * @param {number} year\n     * @param {Month, number} month\n     * @param {number} dayOfMonth\n     */\n    constructor(year, month, dayOfMonth){\n        if (month instanceof Month) {\n            month = month.value();\n        }\n        LocalDate.validate(year, month, dayOfMonth);\n        this._year = year;\n        this._month = month;\n        this._day = dayOfMonth;\n    }\n\n    /**\n     * Obtains an instance of {@code LocalDate} from a year, month and day.\n     * <p>\n     * This returns a {@code LocalDate} with the specified year, month and day-of-month.\n     * The day must be valid for the year and month, otherwise an exception will be thrown.\n     *\n     * @param {number} year  the year to represent, from MIN_YEAR to MAX_YEAR\n     * @param {Month, number} month  the month-of-year to represent, from 1 (January) to 12 (December)\n     * @param {number} dayOfMonth  the day-of-month to represent, from 1 to 31\n     * @return LocalDate the local date, not null\n     * @throws DateTimeException if the value of any field is out of range,\n     *  or if the day-of-month is invalid for the month-year\n     */\n    static of(year, month, dayOfMonth) {\n        return new LocalDate(year, month, dayOfMonth);\n    }\n\n    /**\n     *\n     * @return {number} gets the year\n     */\n    year() {\n        return this._year\n    }\n\n    /**\n     *\n     * @return {number} gets the month\n     */\n    monthValue() {\n        return this._month\n    }\n    \n    month() {\n        return Month.of(this._month);\n    }\n\n    /**\n     *\n     * @return {number} gets the day of month\n     */\n    dayOfMonth() {\n        return this._day\n    }\n\n    /**\n     * Returns a copy of this LocalDate with the specified number of days added.\n     * \n     * This method adds the specified amount to the days field incrementing the\n     * month and year fields as necessary to ensure the result remains valid.\n     * The result is only invalid if the maximum/minimum year is exceeded.\n     * \n     * For example, 2008-12-31 plus one day would result in 2009-01-01.\n     * \n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} daysToAdd - the days to add, may be negative\n     * @return {LocalDate} a LocalDate based on this date with the days added, not null\n     * @throws AssertionError if the result exceeds the supported date range\n     */\n    plusDays(daysToAdd) {\n        if (daysToAdd === 0) {\n            return this;\n        }\n        var mjDay = this.toEpochDay() + daysToAdd;\n        return LocalDate.ofEpochDay(mjDay);\n    };\n\n    /*\n     * Returns a copy of this LocalDate with the specified number of days subtracted.\n     * \n     * This method subtracts the specified amount from the days field decrementing the\n     * month and year fields as necessary to ensure the result remains valid.\n     * The result is only invalid if the maximum/minimum year is exceeded.\n     * \n     * For example, 2009-01-01 minus one day would result in 2008-12-31.\n     * \n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} daysToSubtract - the days to subtract, may be negative\n     * @return {LocalDate} a LocalDate based on this date with the days subtracted, not null\n     * @throws AssertionError if the result exceeds the supported date range\n     */\n    minusDays(daysToSubtract) {\n        return this.plusDays(daysToSubtract * -1)\n    };\n\n    /**\n     * Converts this date to the Epoch Day.\n     *\n     * The Epoch Day count is a simple incrementing count of days where day 0 is 1970-01-01 (ISO).\n     * This definition is the same for all chronologies, enabling conversion.\n     *\n     * @return {number} the Epoch Day equivalent to this date\n     */\n    toEpochDay() {\n        var y = this.year();\n        var m = this.monthValue();\n        var total = 0;\n        total += 365 * y;\n        if (y >= 0) {\n            total += MathUtil.intDiv(y + 3, 4) - MathUtil.intDiv(y + 99, 100) + MathUtil.intDiv(y + 399, 400);\n        } else {\n            total -= MathUtil.intDiv(y, -4) - MathUtil.intDiv(y, -100) + MathUtil.intDiv(y, -400);\n        }\n        total += MathUtil.intDiv(367 * m - 362, 12);\n        total += this.dayOfMonth() - 1;\n        if (m > 2) {\n            total--;\n            if (!IsoChronology.isLeapYear(y)) {\n                total--;\n            }\n        }\n        return total - DAYS_0000_TO_1970;\n    }\n\n    /**\n     * Obtains the current date from the system clock in the default time-zone or\n     * if specified, the current date from the specified clock.\n     *\n     * This will query the specified clock to obtain the current date - today.\n     * Using this method allows the use of an alternate clock for testing.\n     *\n     * @param clock  the clock to use, if null, the system clock and default time-zone is used.\n     * @return the current date, not null\n     */\n    static now(clock = Clock.systemDefaultZone()) {\n        var now = clock.instant();\n        var offset = clock.offset(now);\n        var epochSec = now.epochSecond() + offset.totalSeconds();\n        var epochDay = MathUtil.floorDiv(epochSec, LocalTime.SECONDS_PER_DAY);\n        return LocalDate.ofEpochDay(epochDay);\n    }\n\n    /**\n     * Checks if this date is equal to another date.\n     *\n     * Compares this LocalDate with another ensuring that the date is the same.\n     *\n     * Only objects of type LocalDate are compared, other types return false.\n     *\n     * @param otherDate  the object to check, null returns false\n     * @return true if this is equal to the other date\n     */\n    equals(otherDate) {\n        if (this === otherDate) {\n            return true;\n        }\n        if (otherDate instanceof LocalDate) {\n            return this._compareTo(otherDate) === 0;\n        }\n        return false;\n    }\n\n    _compareTo(otherDate){\n        var cmp = this.year() - otherDate.year();\n        if (cmp === 0) {\n            cmp = (this.monthValue() - otherDate.monthValue());\n            if (cmp === 0) {\n                cmp = (this.dayOfMonth() - otherDate.dayOfMonth());\n            }\n        }\n        return cmp;\n    }\n\n    /**\n     * Outputs this date as a String, such as 2007-12-03.\n     * The output will be in the ISO-8601 format uuuu-MM-dd.\n     *\n     * @return {string} a string representation of this date, not null\n     */\n    toString() {\n        var dayString, monthString, yearString;\n\n        var yearValue = this.year();\n        var monthValue = this.monthValue();\n        var dayValue = this.dayOfMonth();\n\n        var absYear = Math.abs(yearValue);\n\n        if (absYear < 1000) {\n          if (yearValue < 0) {\n            yearString = \"-\" + (\"\" + (yearValue - 10000)).slice(-4);\n          } else {\n            yearString = (\"\" + (yearValue + 10000)).slice(-4);\n          }\n        } else {\n          if (yearValue > 9999) {\n            yearString = \"+\" + yearValue;\n          } else {\n            yearString = \"\" + yearValue;\n          }\n        }\n\n        if (monthValue < 10) {\n          monthString = \"-0\" + monthValue;\n        } else {\n          monthString = \"-\" + monthValue;\n        }\n\n        if (dayValue < 10) {\n          dayString = \"-0\" + dayValue;\n        } else {\n          dayString = \"-\" + dayValue;\n        }\n\n        return yearString + monthString + dayString;\n    }\n\n    /**\n     * Obtains an instance of LocalDate from the epoch day count.\n     *\n     * This returns a LocalDate with the specified epoch-day.\n     * The {@link ChronoField#EPOCH_DAY EPOCH_DAY} is a simple incrementing count\n     * of days where day 0 is 1970-01-01. Negative numbers represent earlier days.\n     *\n     * @param {number} epochDay - the Epoch Day to convert, based on the epoch 1970-01-01\n     * @return {LocalDate} the local date, not null\n     * @throws AssertionError if the epoch days exceeds the supported date range\n     */\n\n    static ofEpochDay(epochDay) {\n        var adjust, adjustCycles, dom, doyEst, marchDoy0, marchMonth0, month, year, yearEst, zeroDay;\n        zeroDay = epochDay + DAYS_0000_TO_1970;\n        zeroDay -= 60;\n        adjust = 0;\n        if (zeroDay < 0) {\n            adjustCycles = MathUtil.intDiv(zeroDay + 1, DAYS_PER_CYCLE) - 1;\n            adjust = adjustCycles * 400;\n            zeroDay += -adjustCycles * DAYS_PER_CYCLE;\n        }\n        yearEst = MathUtil.intDiv(400 * zeroDay + 591, DAYS_PER_CYCLE);\n        doyEst = zeroDay - (365 * yearEst + MathUtil.intDiv(yearEst, 4) - MathUtil.intDiv(yearEst, 100) + MathUtil.intDiv(yearEst, 400));\n        if (doyEst < 0) {\n            yearEst--;\n            doyEst = zeroDay - (365 * yearEst + MathUtil.intDiv(yearEst, 4) - MathUtil.intDiv(yearEst, 100) + MathUtil.intDiv(yearEst, 400));\n        }\n        yearEst += adjust;\n        marchDoy0 = doyEst;\n        marchMonth0 = MathUtil.intDiv(marchDoy0 * 5 + 2, 153);\n        month = (marchMonth0 + 2) % 12 + 1;\n        dom = marchDoy0 - MathUtil.intDiv(marchMonth0 * 306 + 5, 10) + 1;\n        yearEst += MathUtil.intDiv(marchMonth0, 10);\n        year = yearEst;\n        return new LocalDate(year, month, dom);\n    };\n    \n    /**\n     * Obtains an instance of {@code LocalDate} from a year and day-of-year.\n     * <p>\n     * This returns a {@code LocalDate} with the specified year and day-of-year.\n     * The day-of-year must be valid for the year, otherwise an exception will be thrown.\n     *\n     * @param {number} year  the year to represent, from MIN_YEAR to MAX_YEAR\n     * @param {number} dayOfYear  the day-of-year to represent, from 1 to 366\n     * @return LocalDate the local date, not null\n     * @throws DateTimeException if the value of any field is out of range,\n     *  or if the day-of-year is invalid for the year\n     */\n    static ofYearDay(year, dayOfYear) {\n        YEAR.checkValidValue(year);\n        //TODO: DAY_OF_YEAR.checkValidValue(dayOfYear);\n        var leap = IsoChronology.isLeapYear(year);\n        if (dayOfYear === 366 && leap === false) {\n            assert(false, \"Invalid date 'DayOfYear 366' as '\" + year + \"' is not a leap year\", DateTimeException);\n        }\n        var moy = Month.of(Math.floor((dayOfYear - 1) / 31 + 1));\n        var monthEnd = moy.firstDayOfYear(leap) + moy.length(leap) - 1;\n        if (dayOfYear > monthEnd) {\n            moy = moy.plus(1);\n        }\n        var dom = dayOfYear - moy.firstDayOfYear(leap) + 1;\n        return new LocalDate(year, moy.value(), dom);\n    }\n    \n    /**\n     * Returns a copy of this {@code LocalDate} with the day-of-month altered.\n     * <p>\n     * If the resulting date is invalid, an exception is thrown.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} dayOfMonth  the day-of-month to set in the result, from 1 to 28-31\n     * @return {LocalDate} based on this date with the requested day, not null\n     * @throws DateTimeException if the day-of-month value is invalid,\n     *  or if the day-of-month is invalid for the month-year\n     */\n    withDayOfMonth(dayOfMonth) {\n        if (this._day === dayOfMonth) {\n            return this;\n        }\n        return LocalDate.of(this._year, this._month, dayOfMonth);\n    }\n    \n    /**\n     * Returns a copy of this {@code LocalDate} with the month-of-year altered.\n     * <p>\n     * If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} month  the month-of-year to set in the result, from 1 (January) to 12 (December)\n     * @return {@code LocalDate} based on this date with the requested month, not null\n     * @throws DateTimeException if the month-of-year value is invalid\n     */\n    withMonth(month) {\n        if (this._month === month) {\n            return this;\n        }\n        return LocalDate.of(this._year, month, this._day);\n    }\n\n    /**\n     * @private\n     */\n    static validate(year, month, dayOfMonth) {\n        var dom;\n        YEAR.checkValidValue(year);\n        MONTH_OF_YEAR.checkValidValue(month);\n        DAY_OF_MONTH.checkValidValue(dayOfMonth);\n        if (dayOfMonth > 28) {\n            dom = 31;\n            switch (month) {\n                case 2:\n                    dom = IsoChronology.isLeapYear(year) ? 29 : 28;\n                    break;\n                case 4:\n                case 6:\n                case 9:\n                case 11:\n                    dom = 30;\n            }\n            if (dayOfMonth > dom) {\n                if (dayOfMonth === 29) {\n                    assert(false, \"Invalid date 'February 29' as '\" + year + \"' is not a leap year\", DateTimeException);\n                } else {\n                    assert(false, \"Invalid date '\" + year + \"' '\" + month + \"' '\" + dayOfMonth + \"'\", DateTimeException);\n                }\n            }\n        }\n    };\n\n}\n\n/**\n * The minimum supported {@code LocalDate}\n * This could be used by an application as a \"far past\" date.\n */\nLocalDate.MIN = LocalDate.of(Year.MIN_VALUE, 1, 1);\n/**\n * The maximum supported {@code LocalDate}\n * This could be used by an application as a \"far future\" date.\n */\nLocalDate.MAX = LocalDate.of(Year.MAX_VALUE, 12, 31);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/LocalDate.js\n **/","export function assert(assertion, msg, error) {\n    if(!assertion){\n        if (error) {\n            throw new error(msg);\n        } else {\n            throw new Error(msg);\n        }\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/assert.js\n **/","/**\n * Math helper with static function for integer operations\n */\nexport class MathUtil {\n    static intDiv(x, y) {\n        var r = x/y;\n        if(r < 0){\n            return Math.ceil(r);\n        } else {\n            return Math.floor(r);\n        }\n    }\n\n    static floorDiv(x, y){\n        var r = Math.floor(x / y);\n        return r;\n    }\n\n    static floorMod(x, y){\n        var r = x - MathUtil.floorDiv(x, y) * y;\n        return r;\n    }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/MathUtil.js\n **/","import ExtendableError from 'es6-error'\n\nexport class DateTimeException extends ExtendableError {\n    constructor(message = 'DateTimeException') {\n        super(message)\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/errors.js\n **/","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ExtendableError = (function (_Error) {\n  _inherits(ExtendableError, _Error);\n\n  function ExtendableError() {\n    var message = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];\n\n    _classCallCheck(this, ExtendableError);\n\n    _get(Object.getPrototypeOf(ExtendableError.prototype), 'constructor', this).call(this, message);\n\n    // extending Error is weird and does not propagate `message`\n    Object.defineProperty(this, 'message', {\n      enumerable: false,\n      value: message\n    });\n\n    Object.defineProperty(this, 'name', {\n      enumerable: false,\n      value: this.constructor.name\n    });\n\n    if (Error.hasOwnProperty('captureStackTrace')) {\n      Error.captureStackTrace(this, this.constructor);\n      return;\n    }\n\n    Object.defineProperty(this, 'stack', {\n      enumerable: false,\n      value: new Error(message).stack\n    });\n  }\n\n  return ExtendableError;\n})(Error);\n\nexports['default'] = ExtendableError;\nmodule.exports = exports['default'];\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/es6-error/dist/index.js\n ** module id = 5\n ** module chunks = 0\n **/","export class IsoChronology {\n    /**\n     * Checks if the year is a leap year, according to the ISO proleptic\n     * calendar system rules.\n     *\n     * This method applies the current rules for leap years across the whole time-line.\n     * In general, a year is a leap year if it is divisible by four without\n     * remainder. However, years divisible by 100, are not leap years, with\n     * the exception of years divisible by 400 which are.\n     *\n     * For example, 1904 is a leap year it is divisible by 4.\n     * 1900 was not a leap year as it is divisible by 100, however 2000 was a\n     * leap year as it is divisible by 400.\n     *\n     * The calculation is proleptic - applying the same rules into the far future and far past.\n     * This is historically inaccurate, but is correct for the ISO-8601 standard.\n     *\n     * @param {number} prolepticYear - the ISO proleptic year to check\n     * @return true if the year is leap, false otherwise\n     */\n    static isLeapYear(prolepticYear) {\n        return ((prolepticYear & 3) === 0) && ((prolepticYear % 100) !== 0 || (prolepticYear % 400) === 0);\n    }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/chrono/IsoChronology.js\n **/","import { ValueRange } from './ValueRange';\nimport {Year} from '../Year'\n\nclass  ChronoField {\n\n    constructor(name, baseUnit, rangeUnit, range, displayNameKey) {\n        this.name = function () {\n            return name;\n        };\n        this.baseUnit = function () {\n            return baseUnit;\n        };\n        this.rangeUnit = function () {\n            return rangeUnit;\n        };\n        this.range = function () {\n            return range;\n        };\n        this.displayNameKey = function () {\n            return displayNameKey;\n        };\n    }\n\n    checkValidValue(value) {\n        return this.range().checkValidValue(value, this.name());\n    }\n}\n\n\nexport const DAY_OF_MONTH = new ChronoField(\n    \"DayOfMonth\", null, null, ValueRange.of(1, 28, 31), \"day\"\n);\n\nexport const MONTH_OF_YEAR = new ChronoField(\n    \"MonthOfYear\", null, null, ValueRange.of(1, 12), \"month\"\n);\n\nexport const YEAR = new ChronoField(\"\" +\n    \"Year\", null, null, ValueRange.of(Year.MIN_VALUE, Year.MAX_VALUE), \"year\"\n);\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/temporal/ChronoField.js\n **/","import {assert} from '../assert';\nimport {DateTimeException} from '../errors'\n\n/**\n * The range of valid values for a date-time field.\n * \n * All TemporalField instances have a valid range of values.\n * For example, the ISO day-of-month runs from 1 to somewhere between 28 and 31.\n * This class captures that valid range.\n * \n * It is important to be aware of the limitations of this class.\n * Only the minimum and maximum values are provided.\n * It is possible for there to be invalid values within the outer range.\n * For example, a weird field may have valid values of 1, 2, 4, 6, 7, thus\n * have a range of '1 - 7', despite that fact that values 3 and 5 are invalid.\n * \n * Instances of this class are not tied to a specific field.\n *\n */\n\nexport class ValueRange {\n\n    constructor(minSmallest, minLargest, maxSmallest, maxLargest) {\n        assert(!(minSmallest > minLargest), \"Smallest minimum value '\" + minSmallest +\n            \"' must be less than largest minimum value '\" + minLargest + \"'\");\n        assert(!(maxSmallest > maxLargest), \"Smallest maximum value '\" + maxSmallest +\n            \"' must be less than largest maximum value '\" + maxLargest + \"'\");\n        assert(!(minLargest > maxLargest), \"Minimum value '\" + minLargest +\n            \"' must be less than maximum value '\" + maxLargest + \"'\");\n\n        this.minimum = function () {\n            return minSmallest;\n        };\n        this.largestMinimum = function () {\n            return minLargest;\n        };\n        this.maximum = function () {\n            return maxLargest;\n        };\n        this.smallestMaximum = function () {\n            return maxSmallest;\n        };\n    }\n\n    isValidValue(value) {\n        return (this.minimum() <= value && value <= this.maximum());\n    }\n\n    checkValidValue(value, field) {\n        var msg;\n        if (!this.isValidValue(value)) {\n            if (field != null) {\n                msg = (\"Invalid value for \" + field + \" (valid values \" + (this.toString()) + \"): \") + value;\n            } else {\n                msg = (\"Invalid value (valid values \" + (this.toString()) + \"): \") + value;\n            }\n            return assert(false, msg, DateTimeException);\n        }\n    }\n\n    /*\n     * Outputs this range as a String.\n     * \n     * The format will be '{min}/{largestMin} - {smallestMax}/{max}',\n     * where the largestMin or smallestMax sections may be omitted, together\n     * with associated slash, if they are the same as the min or max.\n     *\n     * @return {string} a string representation of this range, not null\n     */\n\n    toString() {\n        var str = this.minimum() + (this.minimum() !== this.largestMinimum() ? \"/\" + (this.largestMinimum()) : \"\");\n        str += \" - \";\n        str += this.smallestMaximum() + (this.smallestMaximum() !== this.maximum() ? \"/\" + (this.maximum()) : \"\");\n        return str;\n    }\n\n    /*\n     * called with 2 params: Obtains a fixed value range.\n     *\n     * This factory obtains a range where the minimum and maximum values are fixed.\n     * For example, the ISO month-of-year always runs from 1 to 12.\n     *\n     * @param min  the minimum value\n     * @param max  the maximum value\n     * @return the ValueRange for min, max, not null\n\n     * called with 3 params: Obtains a variable value range.\n     *\n     * This factory obtains a range where the minimum value is fixed and the maximum value may vary.\n     * For example, the ISO day-of-month always starts at 1, but ends between 28 and 31.\n     *\n     * @param min  the minimum value\n     * @param maxSmallest  the smallest maximum value\n     * @param maxLargest  the largest maximum value\n     * @return the ValueRange for min, smallest max, largest max, not null\n\n     * called with 4 params: Obtains a fully variable value range.\n     *\n     * This factory obtains a range where both the minimum and maximum value may vary.\n     *\n     * @param minSmallest  the smallest minimum value\n     * @param minLargest  the largest minimum value\n     * @param maxSmallest  the smallest maximum value\n     * @param maxLargest  the largest maximum value\n     * @return {ValueRange} the ValueRange for smallest min, largest min, smallest max, largest max, not null\n     */\n\n    static of() {\n        if (arguments.length === 2) {\n            return new ValueRange(arguments[0], arguments[0], arguments[1], arguments[1]);\n        } else if (arguments.length === 3) {\n            return new ValueRange(arguments[0], arguments[0], arguments[1], arguments[2]);\n        } else if (arguments.length === 4) {\n            return new ValueRange(arguments[0], arguments[1], arguments[2], arguments[3]);\n        } else {\n            return assert(false, \"Invalid number of arguments \" + arguments.length);\n        }\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/temporal/ValueRange.js\n **/","/**\n * A year in the ISO-8601 calendar system, such as {@code 2007}.\n * <p>\n * {@code Year} is an immutable date-time object that represents a year.\n * Any field that can be derived from a year can be obtained.\n * <p>\n * <b>Note that years in the ISO chronology only align with years in the\n * Gregorian-Julian system for modern years. Parts of Russia did not switch to the\n * modern Gregorian/ISO rules until 1920.\n * As such, historical years must be treated with caution.</b>\n * <p>\n * This class does not store or represent a month, day, time or time-zone.\n * For example, the value \"2007\" can be stored in a {@code Year}.\n * <p>\n * Years represented by this class follow the ISO-8601 standard and use\n * the proleptic numbering system. Year 1 is preceded by year 0, then by year -1.\n * <p>\n * The ISO-8601 calendar system is the modern civil calendar system used today\n * in most of the world. It is equivalent to the proleptic Gregorian calendar\n * system, in which today's rules for leap years are applied for all time.\n * For most applications written today, the ISO-8601 rules are entirely suitable.\n * However, any application that makes use of historical dates, and requires them\n * to be accurate will find the ISO-8601 approach unsuitable.\n *\n */\nexport class Year {\n    \n}\n\n/**\n * The minimum supported year\n */\nYear.MIN_VALUE = -999999;\n/**\n * The maximum supported year\n */\nYear.MAX_VALUE = 999999;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Year.js\n **/","import {Instant} from './Instant'\nimport {ZoneOffset} from './ZoneOffset'\n\n/**\n * A clock providing access to the current instant, date and time using a time-zone.\n * <p>\n * Instances of this class are used to find the current instant, which can be\n * interpreted using the stored time-zone to find the current date and time.\n * As such, a clock can be used instead of {@link System#currentTimeMillis()}\n * and {@link TimeZone#getDefault()}.\n * <p>\n * Use of a {@code Clock} is optional. All key date-time classes also have a\n * {@code now()} factory method that uses the system clock in the default time zone.\n * The primary purpose of this abstraction is to allow alternate clocks to be\n * plugged in as and when required. Applications use an object to obtain the\n * current time rather than a static method. This can simplify testing.\n * <p>\n * Best practice for applications is to pass a {@code Clock} into any method\n * that requires the current instant.\n *\n * This approach allows an alternate clock, such as {@link #fixed(Instant, ZoneId) fixed}\n * or {@link #offset(Clock, Duration) offset} to be used during testing.\n * <p>\n * The {@code system} factory methods provide clocks based on the best available\n * system clock This may use {@link System#currentTimeMillis()}, or a higher\n * resolution clock if one is available.\n */\n\n/**\n * The javascript Clock implementation differs from the openjdk.\n *\n * Javascript only provides the UTC millis of epoch and the ZoneOffset in minutes of the system default time.\n * Javascript do not provide the system default ZoneId.\n *\n * the system default ZoneId is only guessable by the ZoneOffset, like moment-timezone does by returning one ZoneId\n * with the same ZoneOffset.\n *\n * Therefore we are doing a shortcut here, by defining a SystemUTCClock and a SystemDefaultClock, the Clock itself\n * is returning the ZoneOffset and not the ZoneRules as in the jdk. We should change it, when introducing the iana\n * timezone database and implementing the timezone domains.\n *\n */\n\nexport class Clock {\n    /**\n     * Obtains a clock that returns the current instant using the\n     * system clock, converting to date and time using the Date.getTime() UTC millis.\n     * <p>\n     * This clock, rather than {@link #systemDefaultZone()}, should be used when\n     * you need the current instant without the date or time.\n     * <p>\n     * @return a clock that uses the system clock in the UTC zone, not null\n     */\n    static systemUTC() {\n        return new SystemUTCClock();\n    }\n\n    /**\n     * Obtains a clock that returns the current instant using the best available\n     * system clock, converting to date and time using the default time-zone.\n     * <p>\n     * This clock is based on the available system clock using the Date.getTime() UTC millis\n     * <p>\n     * Using this method hard codes a dependency to the default time-zone into your application.\n     *\n     * The {@link #systemUTC() UTC clock} should be used when you need the current instant\n     * without the date or time.\n     * <p>\n     *\n     * @return a clock that uses the system clock in the default zone, not null\n     * @see ZoneId#systemDefault()\n     */\n    static systemDefaultZone() {\n        return new SystemDefaultClock();\n    }\n\n    /**\n     * Obtains a clock that always returns the same instant.\n     * <p>\n     * This clock simply returns the specified instant.\n     * As such, it is not a clock in the conventional sense.\n     * The main use case for this is in testing, where the fixed clock ensures\n     * tests are not dependent on the current clock.\n     *\n     * @param fixedInstant  the instant to use as the clock, not null\n     * @param zoneOffset  the zoneOffset to use as zone Offset, not null\n     * @return a clock that always returns the same instant, not null\n     */\n    static fixed(fixedInstant, zoneOffset) {\n        return new FixedClock(fixedInstant, zoneOffset);\n    }\n\n    /**\n      * Gets the current millisecond instant of the clock.\n      * <p>\n      * This returns the millisecond-based instant, measured from 1970-01-01T00:00Z (UTC).\n      * This is equivalent to the definition of {@link Date#getTime()}.\n      * <p>\n      * Most applications should avoid this method and use {@link Instant} to represent\n      * an instant on the time-line rather than a raw millisecond value.\n      * This method is provided to allow the use of the clock in high performance use cases\n      * where the creation of an object would be unacceptable.\n      * <p>\n      * The default implementation currently calls {@link #instant}.\n      *\n      * @return the current millisecond instant from this clock, measured from\n      *  the Java epoch of 1970-01-01T00:00Z (UTC), not null\n      */\n    millis(){\n        throw new TypeError('millis() function is not implemented')\n    }\n\n    /**\n     * Gets the current instant of the clock.\n     * <p>\n     * This returns an instant representing the current instant as defined by the clock.\n     *\n     * @return the current instant from this clock, not null\n     */\n    instant(){\n        throw new TypeError('instant() function is not implemented')\n    }\n\n    /**\n     * in opposite to the jdk implementation the Clock itself returns the offset, that is because\n     * javascript provides only the UTC and the \"local\" (system default time zone.\n     * it is not possible the get the system default ZoneId without guessing. If we would define ZoneRules, we had to\n     * define something like a virtual, not standard ZoneId like \"SystemDefault\".\n     * Until we to not have a tzdb, we leave this question open\n     */\n    offset(){\n        throw new TypeError('offset() function is not implemented')\n    }\n}\n\nclass SystemClock extends Clock {\n    millis() {\n        return new Date().getTime();\n    }\n\n    instant() {\n        return Instant.ofEpochMilli(this.millis());\n    }\n\n    offset() {\n        return ZoneOffset.ofTotalSeconds(0);\n    }\n}\n\n/**\n * Implementation of a clock that always returns the latest time from\n * {@link Date#getTime()}.\n */\nclass SystemUTCClock extends SystemClock{\n    toString(){\n        return \"SystemClock[UTC]\";\n    }\n}\n\n/**\n * Implementation of a clock that always returns the latest time from\n * sytem default Zone {@link Date#getTime()} and {@link Date#getTimeZoneOffset()}.\n */\nclass SystemDefaultClock extends SystemClock{\n    offset(instant) {\n        var offsetInMinutes = new Date().getTimezoneOffset(instant.epochMilli());\n        return ZoneOffset.ofTotalMinutes(offsetInMinutes);\n    }\n\n    toString(){\n        return \"SystemClock[default]\";\n    }\n}\n\n/**\n * Implementation of a clock that always returns the same instant.\n * This is typically used for testing.\n */\nclass FixedClock extends Clock{\n    constructor(fixedInstant, zoneOffset) {\n        super();\n        this._instant = fixedInstant;\n        this._zoneOffset = zoneOffset;\n    }\n\n    instant() {\n        return this._instant;\n    }\n\n    offset() {\n        return this._zoneOffset;\n    }\n\n    toString(){\n        return \"FixedClock[]\";\n    }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Clock.js\n **/","import {DateTimeException} from './errors'\nimport {MathUtil} from './MathUtil'\nimport {Clock} from './Clock'\nimport {LocalTime} from './LocalTime'\n\n// TODO verify the arbitrary values for min/ max seconds, set to 999_999 Years for now\nconst MIN_SECONDS = -31619087596800; // -999999-01-01\nconst MAX_SECONDS = 31494784694400; // 999999-12-31\n\n/**\n * An instantaneous point on the time-line.\n * \n * This class models a single instantaneous point on the time-line.\n * This might be used to record event time-stamps in the application.\n * \n * Time-scale\n * \n * The length of the solar day is the standard way that humans measure time.\n * This has traditionally been subdivided into 24 hours of 60 minutes of 60 seconds,\n * forming a 86400 second day.\n * \n * Modern timekeeping is based on atomic clocks which precisely define an SI second\n * relative to the transitions of a Caesium atom. The length of an SI second was defined\n * to be very close to the 86400th fraction of a day.\n * \n * Unfortunately, as the Earth rotates the length of the day varies.\n * In addition, over time the average length of the day is getting longer as the Earth slows.\n * As a result, the length of a solar day in 2012 is slightly longer than 86400 SI seconds.\n * The actual length of any given day and the amount by which the Earth is slowing\n * are not predictable and can only be determined by measurement.\n * The UT1 time-scale captures the accurate length of day, but is only available some\n * time after the day has completed.\n * \n * The UTC time-scale is a standard approach to bundle up all the additional fractions\n * of a second from UT1 into whole seconds, known as <i>leap-seconds</i>.\n * A leap-second may be added or removed depending on the Earth's rotational changes.\n * As such, UTC permits a day to have 86399 SI seconds or 86401 SI seconds where\n * necessary in order to keep the day aligned with the Sun.\n * \n * The modern UTC time-scale was introduced in 1972, introducing the concept of whole leap-seconds.\n * Between 1958 and 1972, the definition of UTC was complex, with minor sub-second leaps and\n * alterations to the length of the notional second. As of 2012, discussions are underway\n * to change the definition of UTC again, with the potential to remove leap seconds or\n * introduce other changes.\n * \n * Given the complexity of accurate timekeeping described above, this Java API defines\n * its own time-scale, the <i>Java Time-Scale</i>.\n * \n * The Java Time-Scale divides each calendar day into exactly 86400\n * subdivisions, known as seconds.  These seconds may differ from the\n * SI second.  It closely matches the de facto international civil time\n * scale, the definition of which changes from time to time.\n * \n * The Java Time-Scale has slightly different definitions for different\n * segments of the time-line, each based on the consensus international\n * time scale that is used as the basis for civil time. Whenever the\n * internationally-agreed time scale is modified or replaced, a new\n * segment of the Java Time-Scale must be defined for it.  Each segment\n * must meet these requirements:\n * <ul>\n * <li>the Java Time-Scale shall closely match the underlying international\n *  civil time scale;</li>\n * <li>the Java Time-Scale shall exactly match the international civil\n *  time scale at noon each day;</li>\n * <li>the Java Time-Scale shall have a precisely-defined relationship to\n *  the international civil time scale.</li>\n * </ul>\n * There are currently, as of 2013, two segments in the Java time-scale.\n * \n * For the segment from 1972-11-03 (exact boundary discussed below) until\n * further notice, the consensus international time scale is UTC (with\n * leap seconds).  In this segment, the Java Time-Scale is identical to\n * <a href=\"http://www.cl.cam.ac.uk/~mgk25/time/utc-sls/\">UTC-SLS</a>.\n * This is identical to UTC on days that do not have a leap second.\n * On days that do have a leap second, the leap second is spread equally\n * over the last 1000 seconds of the day, maintaining the appearance of\n * exactly 86400 seconds per day.\n * \n * For the segment prior to 1972-11-03, extending back arbitrarily far,\n * the consensus international time scale is defined to be UT1, applied\n * proleptically, which is equivalent to the (mean) solar time on the\n * prime meridian (Greenwich). In this segment, the Java Time-Scale is\n * identical to the consensus international time scale. The exact\n * boundary between the two segments is the instant where UT1 = UTC\n * between 1972-11-03T00:00 and 1972-11-04T12:00.\n * \n * Implementations of the Java time-scale using the JSR-310 API are not\n * required to provide any clock that is sub-second accurate, or that\n * progresses monotonically or smoothly. Implementations are therefore\n * not required to actually perform the UTC-SLS slew or to otherwise be\n * aware of leap seconds. JSR-310 does, however, require that\n * implementations must document the approach they use when defining a\n * clock representing the current instant.\n * See {@link Clock} for details on the available clocks.\n * \n * The Java time-scale is used for all date-time classes.\n * This includes {@code Instant}, {@code LocalDate}, {@code LocalTime}, {@code OffsetDateTime},\n * {@code ZonedDateTime} and {@code Duration}.\n *\n */\nexport class Instant {\n\n    constructor(seconds, nanoOfSecond){\n        Instant.validate(seconds, nanoOfSecond);\n        this._seconds = seconds;\n        this._nanos = nanoOfSecond;\n    }\n\n    /**\n     * Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z.\n     * \n     * The epoch second count is a simple incrementing count of seconds where\n     * second 0 is 1970-01-01T00:00:00Z.\n     * The nanosecond part of the day is returned by {@code getNanosOfSecond}.\n     *\n     * @return the seconds from the epoch of 1970-01-01T00:00:00Z\n     */\n    epochSecond(){\n        return this._seconds\n    }\n\n    /**\n     * Gets the number of milli seconds from the Java epoch of 1970-01-01T00:00:00Z.\n     * \n     * The epoch milli second count is a simple incrementing count of milli seconds where\n     * milli second 0 is 1970-01-01T00:00:00Z.\n     *\n     * @return the milli seconds from the epoch of 1970-01-01T00:00:00Z\n     */\n    epochMilli(){\n        return this._seconds * 1000 + this._nanos / 1000000;\n    }\n\n    /**\n     * Gets the number of nanoseconds, later along the time-line, from the start\n     * of the second.\n     * \n     * The nanosecond-of-second value measures the total number of nanoseconds from\n     * the second returned by {@code getEpochSecond}.\n     *\n     * @return the nanoseconds within the second, always positive, never exceeds 999,999,999\n     */\n    nano(){\n        return this._nanos\n    }\n\n    /**\n     * Obtains the current instant from the system clock, or if specified\n     * the current instant from the specified clock.\n     *\n     * This will query the specified clock to obtain the current time.\n     *\n     * @param clock  the clock to use, defaults to the system clock\n     * @return the current instant, not null\n     */\n    static now(clock = Clock.systemUTC()){\n        return clock.instant();\n    }\n\n    /**\n     * Returns a copy of this instant with the specified duration in seconds added.\n     * \n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param secondsToAdd  the seconds to add, positive or negative\n     * @return an {@code Instant} based on this instant with the specified seconds added, not null\n     * @throws DateTimeException if the result exceeds the maximum or minimum instant\n     */\n    plusSeconds(secondsToAdd) {\n        return this._plus(secondsToAdd, 0);\n    }\n\n    /**\n     * Returns a copy of this instant with the specified duration in seconds subtracted.\n     * \n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param secondsToSubtract  the seconds to subtract, positive or negative\n     * @return an {@code Instant} based on this instant with the specified seconds subtracted, not null\n     * @throws DateTimeException if the result exceeds the maximum or minimum instant\n     */\n    minusSeconds(secondsToSubtract) {\n        return this.plusSeconds(secondsToSubtract * -1);\n    }\n\n    /**\n     * Returns a copy of this instant with the specified duration in nanoseconds added.\n     * \n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param nanosToAdd  the nanoseconds to add, positive or negative\n     * @return an {@code Instant} based on this instant with the specified nanoseconds added, not null\n     * @throws DateTimeException if the result exceeds the maximum or minimum instant\n     */\n    plusNanos(nanosToAdd) {\n        return this._plus(0, nanosToAdd);\n    }\n\n    /**\n     * Returns a copy of this instant with the specified duration added.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param secondsToAdd  the seconds to add, positive or negative\n     * @param nanosToAdd  the nanos to add, positive or negative\n     * @return an {@code Instant} based on this instant with the specified seconds added, not null\n     * @throws DateTimeException if the result exceeds the maximum or minimum instant\n     */\n    _plus(secondsToAdd, nanosToAdd) {\n        if ((secondsToAdd | nanosToAdd) == 0) {\n            return this;\n        }\n        var epochSec = this._seconds + secondsToAdd;\n        epochSec = epochSec + MathUtil.intDiv(nanosToAdd, LocalTime.NANOS_PER_SECOND);\n        var _nanosToAdd = nanosToAdd % LocalTime.NANOS_PER_SECOND;\n        var nanoAdjustment = this._nanos + _nanosToAdd;\n        return Instant.ofEpochSecond(epochSec, nanoAdjustment);\n    }\n\n    /**\n     * Checks if this instant is equal to the specified instant.\n     * <p>\n     * The comparison is based on the time-line position of the instants.\n     *\n     * @param otherInstant  the other instant, null/ undefined returns false\n     * @return true if the other instant is equal to this one\n     */\n    equals(otherInstant) {\n        if(this === otherInstant){\n            return true;\n        }\n        if(otherInstant instanceof Instant){\n            return this.epochSecond() === otherInstant.epochSecond() &&\n                this.nano() === otherInstant.nano()\n        }\n        return false;\n    }\n\n    /**\n     * Obtains an instance of {@code Instant} using seconds from the\n     * epoch of 1970-01-01T00:00:00Z.\n     *\n     * @param epochSecond  the number of seconds from 1970-01-01T00:00:00Z\n     * @param nanoAdjustment nanoseconds start from the start of epochSecond, if null the nanosecond field is set to zero.\n     * @return an instant, not null\n     * @throws DateTimeException if the instant exceeds the maximum or minimum instant\n     */\n    static ofEpochSecond(epochSecond, nanoAdjustment=0){\n        var secs = epochSecond + MathUtil.floorDiv(nanoAdjustment, LocalTime.NANOS_PER_SECOND);\n        var nos = MathUtil.floorMod(nanoAdjustment, LocalTime.NANOS_PER_SECOND);\n        return Instant._create(secs, nos);\n    }\n\n    /**\n     * Obtains an instance of {@code Instant} using milliseconds from the\n     * epoch of 1970-01-01T00:00:00Z.\n     * <p>\n     * The seconds and nanoseconds are extracted from the specified milliseconds.\n     *\n     * @param epochMilli  the number of milliseconds from 1970-01-01T00:00:00Z\n     * @return an instant, not null\n     * @throws DateTimeException if the instant exceeds the maximum or minimum instant\n     */\n    static ofEpochMilli(epochMilli) {\n        var secs = MathUtil.floorDiv(epochMilli, 1000);\n        var mos = MathUtil.floorMod(epochMilli, 1000);\n        return Instant._create(secs, mos * 1000000);\n    }\n\n    static _create(seconds, nanoOfSecond){\n        if(seconds === 0 && nanoOfSecond === 0){\n            return Instant.EPOCH;\n        }\n        return new Instant(seconds, nanoOfSecond);\n    }\n\n    static validate(seconds, nanoOfSecond){\n        if (seconds < MIN_SECONDS || seconds > MAX_SECONDS) {\n            throw new DateTimeException(\"Instant exceeds minimum or maximum instant\")\n        }\n    }\n}\n\nInstant.EPOCH = new Instant(0,0);\nInstant.MIN = Instant.ofEpochSecond(MIN_SECONDS, 0);\nInstant.MAX = Instant.ofEpochSecond(MAX_SECONDS, 999999999);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Instant.js\n **/","export class LocalTime {\n\n}\n\nLocalTime.HOURS_PER_DAY = 24;\nLocalTime.MINUTES_PER_HOUR = 60;\nLocalTime.MINUTES_PER_DAY = LocalTime.MINUTES_PER_HOUR * LocalTime.HOURS_PER_DAY;\n\nLocalTime.SECONDS_PER_MINUTE = 60;\nLocalTime.SECONDS_PER_HOUR = LocalTime.SECONDS_PER_MINUTE * LocalTime.MINUTES_PER_HOUR;\nLocalTime.SECONDS_PER_DAY = LocalTime.SECONDS_PER_HOUR * LocalTime.HOURS_PER_DAY;\n\nLocalTime.NANOS_PER_SECOND = 1000000000;\n\n\n/** WEBPACK FOOTER **\n ** ./src/LocalTime.js\n **/","import {DateTimeException} from './errors';\nimport {LocalTime} from './LocalTime'\n\nconst MAX_SECONDS = 18 * LocalTime.SECONDS_PER_HOUR;\nvar SECONDS_CACHE = {};\n\nexport class ZoneOffset {\n    constructor(totalSeconds){\n        ZoneOffset.validateTotalSeconds(totalSeconds);\n        this._totalSeconds = totalSeconds;\n    }\n\n    totalSeconds() {\n        return this._totalSeconds;\n    }\n\n    static validateTotalSeconds(totalSeconds){\n        if (Math.abs(totalSeconds) > MAX_SECONDS) {\n            throw new DateTimeException(\"Zone offset not in valid range: -18:00 to +18:00\");\n        }\n    }\n\n    static validate(hours, minutes, seconds) {\n        if (hours < -18 || hours > 18) {\n            throw new DateTimeException(\"Zone offset hours not in valid range: value \" + hours +\n                    \" is not in the range -18 to 18\");\n        }\n        if (hours > 0) {\n            if (minutes < 0 || seconds < 0) {\n                throw new DateTimeException(\"Zone offset minutes and seconds must be positive because hours is positive\");\n            }\n        } else if (hours < 0) {\n            if (minutes > 0 || seconds > 0) {\n                throw new DateTimeException(\"Zone offset minutes and seconds must be negative because hours is negative\");\n            }\n        } else if ((minutes > 0 && seconds < 0) || (minutes < 0 && seconds > 0)) {\n            throw new DateTimeException(\"Zone offset minutes and seconds must have the same sign\");\n        }\n        if (Math.abs(minutes) > 59) {\n            throw new DateTimeException(\"Zone offset minutes not in valid range: abs(value) \" +\n                    Math.abs(minutes) + \" is not in the range 0 to 59\");\n        }\n        if (Math.abs(seconds) > 59) {\n            throw new DateTimeException(\"Zone offset seconds not in valid range: abs(value) \" +\n                    Math.abs(seconds) + \" is not in the range 0 to 59\");\n        }\n        if (Math.abs(hours) == 18 && (Math.abs(minutes) > 0 || Math.abs(seconds) > 0)) {\n            throw new DateTimeException(\"Zone offset not in valid range: -18:00 to +18:00\");\n        }\n    }\n\n    static ofHours(hours) {\n        return ZoneOffset.ofHoursMinutesSeconds(hours, 0, 0);\n    }\n\n    static ofHoursMinutes(hours, minutes) {\n        return ZoneOffset.ofHoursMinutesSeconds(hours, minutes, 0);\n    }\n\n    static ofHoursMinutesSeconds(hours, minutes, seconds) {\n        ZoneOffset.validate(hours, minutes, seconds);\n        var totalSeconds = hours * LocalTime.SECONDS_PER_HOUR + minutes * LocalTime.SECONDS_PER_MINUTE + seconds;\n        return ZoneOffset.ofTotalSeconds(totalSeconds);\n    }\n\n    static ofTotalMinutes(totalMinutes) {\n        var totalSeconds = totalMinutes * LocalTime.SECONDS_PER_MINUTE;\n        return ZoneOffset.ofTotalSeconds(totalSeconds);\n    }\n\n    static ofTotalSeconds(totalSeconds) {\n        if (totalSeconds % (15 * LocalTime.SECONDS_PER_MINUTE) === 0) {\n            var totalSecs = totalSeconds;\n            var result = SECONDS_CACHE[totalSecs];\n            if (result == null) {\n                result = new ZoneOffset(totalSeconds);\n                SECONDS_CACHE[totalSecs] = result;\n            }\n            return result;\n        } else {\n            return new ZoneOffset(totalSeconds);\n        }\n    }\n\n}\n\nZoneOffset.UTC = ZoneOffset.ofTotalSeconds(0);\n\n\n/** WEBPACK FOOTER **\n ** ./src/ZoneOffset.js\n **/","import {assert} from './assert'\nimport {DateTimeException} from './errors'\n\n/**\n * A month-of-year, such as 'July'.\n * <p>\n * {@code Month} is representing the 12 months of the year -\n * January, February, March, April, May, June, July, August, September, October,\n * November and December.\n * <p>\n * In addition to the textual name, each month-of-year has an {@code int} value.\n * The {@code int} value follows normal usage and the ISO-8601 standard,\n * from 1 (January) to 12 (December). It is recommended that applications use the static values defined by this class\n * rather than the {@code int} value to ensure code clarity.\n * <p>\n * This class represents a common concept that is found in many calendar systems.\n * As such, this class may be used by any calendar system that has the month-of-year\n * concept defined exactly equivalent to the ISO-8601 calendar system.\n *\n */\nexport class Month {\n    \n    /**\n     *\n     * @param {number} value\n     */\n    constructor(value){\n        this._value = value;\n    }\n\n    /**\n     *\n     * @return {number} gets the value\n     */\n    value() {\n        return this._value\n    }\n    \n    /**\n     * Returns the month-of-year that is the specified number of months after this one.\n     * <p>\n     * The calculation rolls around the end of the year from December to January.\n     * The specified period may be negative.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} months  the months to add, positive or negative\n     * @return {Month} the resulting month, not null\n     */\n    plus(months) {\n        var amount = Math.floor((months % 12));\n        var newMonthVal = ((this.value() + amount) % 12);\n        /* December is 12, not 0, but 12 % 12 = 0 */\n        newMonthVal = newMonthVal == 0 ? 12 : newMonthVal;\n        return Month.of(newMonthVal);\n    }\n\n    /**\n     * Returns the month-of-year that is the specified number of months before this one.\n     * <p>\n     * The calculation rolls around the start of the year from January to December.\n     * The specified period may be negative.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} months  the months to subtract, positive or negative\n     * @return {Month} the resulting month, not null\n     */\n    minus(months) {\n        return this.plus(-(months % 12));\n    }\n\n    /**\n     * Gets the length of this month in days.\n     * <p>\n     * This takes a flag to determine whether to return the length for a leap year or not.\n     * <p>\n     * February has 28 days in a standard year and 29 days in a leap year.\n     * April, June, September and November have 30 days.\n     * All other months have 31 days.\n     *\n     * @param {boolean} leapYear  true if the length is required for a leap year\n     * @return {number} the length of this month in days, from 28 to 31\n     */\n    length(leapYear) {\n        switch (this) {\n            case Month.FEBRUARY:\n                return (leapYear ? 29 : 28);\n            case Month.APRIL:\n            case Month.JUNE:\n            case Month.SEPTEMBER:\n            case Month.NOVEMBER:\n                return 30;\n            default:\n                return 31;\n        }\n    }\n\n    /**\n     * Gets the day-of-year corresponding to the first day of this month.\n     * <p>\n     * This returns the day-of-year that this month begins on, using the leap\n     * year flag to determine the length of February.\n     *\n     * @param {boolean} leapYear  true if the length is required for a leap year\n     * @return {number} the day of year corresponding to the first day of this month, from 1 to 336\n     */\n    firstDayOfYear(leapYear) {\n        var leap = leapYear ? 1 : 0;\n        switch (this) {\n            case Month.JANUARY:\n                return 1;\n            case Month.FEBRUARY:\n                return 32;\n            case Month.MARCH:\n                return 60 + leap;\n            case Month.APRIL:\n                return 91 + leap;\n            case Month.MAY:\n                return 121 + leap;\n            case Month.JUNE:\n                return 152 + leap;\n            case Month.JULY:\n                return 182 + leap;\n            case Month.AUGUST:\n                return 213 + leap;\n            case Month.SEPTEMBER:\n                return 244 + leap;\n            case Month.OCTOBER:\n                return 274 + leap;\n            case Month.NOVEMBER:\n                return 305 + leap;\n            case Month.DECEMBER:\n            default:\n                return 335 + leap;\n        }\n    }\n\n   /**\n     *\n     * @param {number} month\n     * @return {Month} not null\n     **/\n    static of(month) {\n       if (month < 1 || month > 12) {\n           assert(false, \"Invalid value for MonthOfYear: \" + month, DateTimeException);\n       }\n       return MONTHS[month-1];\n    }\n}\n\nMonth.JANUARY = new Month(1);\nMonth.FEBRUARY = new Month(2);\nMonth.MARCH = new Month(3);\nMonth.APRIL = new Month(4);\nMonth.MAY = new Month(5);\nMonth.JUNE = new Month(6);\nMonth.JULY = new Month(7);\nMonth.AUGUST = new Month(8);\nMonth.SEPTEMBER = new Month(9);\nMonth.OCTOBER = new Month(10);\nMonth.NOVEMBER = new Month(11);\nMonth.DECEMBER = new Month(12);\n\nvar MONTHS = [\n    Month.JANUARY, Month.FEBRUARY, Month.MARCH, Month.APRIL, Month.MAY, Month.JUNE,\n    Month.JULY, Month.AUGUST, Month.SEPTEMBER, Month.OCTOBER, Month.NOVEMBER, Month.DECEMBER\n];\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Month.js\n **/"],"sourceRoot":""}