import {expect} from 'chai';
import {Instant} from '../../src/Instant';
import {DateTimeException} from '../../src/errors';

const MIN_SECOND = Instant.MIN.epochSecond();
const MAX_SECOND = Instant.MAX.epochSecond();

describe('tck.java.time.TCKInstant', () => {
    function check(instant, epochSecs, nos) {
        expect(instant.epochSecond()).to.equal(epochSecs);
        expect(instant.nano()).to.equal(nos);
        expect(instant.equals(instant));
        expect(instant.equals(Instant.ofEpochSecond(epochSecs, nos)));
    }

    describe('constant', () => {
        it('EPOCH', () => {
            check(Instant.EPOCH, 0, 0);
        });
        it('MIN', () => {
            check(Instant.MIN, -30818963289600, 0);
        });
        it('MAX', () => {
            check(Instant.MAX, 30697775193600, 999999999);
        });
    });

    describe.only('plus', () => {
        var dataProviderPlus;
        beforeEach(() => {
            dataProviderPlus = [
                [MIN_SECOND, 0, -MIN_SECOND, 0, 0, 0],

                [MIN_SECOND, 0, 1, 0, MIN_SECOND + 1, 0],
                [MIN_SECOND, 0, 0, 500, MIN_SECOND, 500],
                [MIN_SECOND, 0, 0, 1000000000, MIN_SECOND + 1, 0],

                [MIN_SECOND + 1, 0, -1, 0, MIN_SECOND, 0],
                [MIN_SECOND + 1, 0, 0, -500, MIN_SECOND, 999999500],
                [MIN_SECOND + 1, 0, 0, -1000000000, MIN_SECOND, 0],

                [-4, 666666667, -4, 666666667, -7, 333333334],
                [-4, 666666667, -3,         0, -7, 666666667],
                [-4, 666666667, -2,         0, -6, 666666667],
                [-4, 666666667, -1,         0, -5, 666666667],
                [-4, 666666667, -1, 333333334, -4,         1],
                [-4, 666666667, -1, 666666667, -4, 333333334],
                [-4, 666666667, -1, 999999999, -4, 666666666],
                [-4, 666666667,  0,         0, -4, 666666667],
                [-4, 666666667,  0,         1, -4, 666666668],
                [-4, 666666667,  0, 333333333, -3,         0],
                [-4, 666666667,  0, 666666666, -3, 333333333],
                [-4, 666666667,  1,         0, -3, 666666667],
                [-4, 666666667,  2,         0, -2, 666666667],
                [-4, 666666667,  3,         0, -1, 666666667],
                [-4, 666666667,  3, 333333333,  0,         0],

                [-3, 0, -4, 666666667, -7, 666666667],
                [-3, 0, -3,         0, -6,         0],
                [-3, 0, -2,         0, -5,         0],
                [-3, 0, -1,         0, -4,         0],
                [-3, 0, -1, 333333334, -4, 333333334],
                [-3, 0, -1, 666666667, -4, 666666667],
                [-3, 0, -1, 999999999, -4, 999999999],
                [-3, 0,  0,         0, -3,         0],
                [-3, 0,  0,         1, -3,         1],
                [-3, 0,  0, 333333333, -3, 333333333],
                [-3, 0,  0, 666666666, -3, 666666666],
                [-3, 0,  1,         0, -2,         0],
                [-3, 0,  2,         0, -1,         0],
                [-3, 0,  3,         0,  0,         0],
                [-3, 0,  3, 333333333,  0, 333333333],

                [-2, 0, -4, 666666667, -6, 666666667],
                [-2, 0, -3,         0, -5,         0],
                [-2, 0, -2,         0, -4,         0],
                [-2, 0, -1,         0, -3,         0],
                [-2, 0, -1, 333333334, -3, 333333334],
                [-2, 0, -1, 666666667, -3, 666666667],
                [-2, 0, -1, 999999999, -3, 999999999],
                [-2, 0,  0,         0, -2,         0],
                [-2, 0,  0,         1, -2,         1],
                [-2, 0,  0, 333333333, -2, 333333333],
                [-2, 0,  0, 666666666, -2, 666666666],
                [-2, 0,  1,         0, -1,         0],
                [-2, 0,  2,         0,  0,         0],
                [-2, 0,  3,         0,  1,         0],
                [-2, 0,  3, 333333333,  1, 333333333],

                [-1, 0, -4, 666666667, -5, 666666667],
                [-1, 0, -3,         0, -4,         0],
                [-1, 0, -2,         0, -3,         0],
                [-1, 0, -1,         0, -2,         0],
                [-1, 0, -1, 333333334, -2, 333333334],
                [-1, 0, -1, 666666667, -2, 666666667],
                [-1, 0, -1, 999999999, -2, 999999999],
                [-1, 0,  0,         0, -1,         0],
                [-1, 0,  0,         1, -1,         1],
                [-1, 0,  0, 333333333, -1, 333333333],
                [-1, 0,  0, 666666666, -1, 666666666],
                [-1, 0,  1,         0,  0,         0],
                [-1, 0,  2,         0,  1,         0],
                [-1, 0,  3,         0,  2,         0],
                [-1, 0,  3, 333333333,  2, 333333333],

                [-1, 666666667, -4, 666666667, -4, 333333334],
                [-1, 666666667, -3,         0, -4, 666666667],
                [-1, 666666667, -2,         0, -3, 666666667],
                [-1, 666666667, -1,         0, -2, 666666667],
                [-1, 666666667, -1, 333333334, -1,         1],
                [-1, 666666667, -1, 666666667, -1, 333333334],
                [-1, 666666667, -1, 999999999, -1, 666666666],
                [-1, 666666667,  0,         0, -1, 666666667],
                [-1, 666666667,  0,         1, -1, 666666668],
                [-1, 666666667,  0, 333333333,  0,         0],
                [-1, 666666667,  0, 666666666,  0, 333333333],
                [-1, 666666667,  1,         0,  0, 666666667],
                [-1, 666666667,  2,         0,  1, 666666667],
                [-1, 666666667,  3,         0,  2, 666666667],
                [-1, 666666667,  3, 333333333,  3,         0],

                [0, 0, -4, 666666667, -4, 666666667],
                [0, 0, -3,         0, -3,         0],
                [0, 0, -2,         0, -2,         0],
                [0, 0, -1,         0, -1,         0],
                [0, 0, -1, 333333334, -1, 333333334],
                [0, 0, -1, 666666667, -1, 666666667],
                [0, 0, -1, 999999999, -1, 999999999],
                [0, 0,  0,         0,  0,         0],
                [0, 0,  0,         1,  0,         1],
                [0, 0,  0, 333333333,  0, 333333333],
                [0, 0,  0, 666666666,  0, 666666666],
                [0, 0,  1,         0,  1,         0],
                [0, 0,  2,         0,  2,         0],
                [0, 0,  3,         0,  3,         0],
                [0, 0,  3, 333333333,  3, 333333333],

                [0, 333333333, -4, 666666667, -3,         0],
                [0, 333333333, -3,         0, -3, 333333333],
                [0, 333333333, -2,         0, -2, 333333333],
                [0, 333333333, -1,         0, -1, 333333333],
                [0, 333333333, -1, 333333334, -1, 666666667],
                [0, 333333333, -1, 666666667,  0,         0],
                [0, 333333333, -1, 999999999,  0, 333333332],
                [0, 333333333,  0,         0,  0, 333333333],
                [0, 333333333,  0,         1,  0, 333333334],
                [0, 333333333,  0, 333333333,  0, 666666666],
                [0, 333333333,  0, 666666666,  0, 999999999],
                [0, 333333333,  1,         0,  1, 333333333],
                [0, 333333333,  2,         0,  2, 333333333],
                [0, 333333333,  3,         0,  3, 333333333],
                [0, 333333333,  3, 333333333,  3, 666666666],

                [1, 0, -4, 666666667, -3, 666666667],
                [1, 0, -3,         0, -2,         0],
                [1, 0, -2,         0, -1,         0],
                [1, 0, -1,         0,  0,         0],
                [1, 0, -1, 333333334,  0, 333333334],
                [1, 0, -1, 666666667,  0, 666666667],
                [1, 0, -1, 999999999,  0, 999999999],
                [1, 0,  0,         0,  1,         0],
                [1, 0,  0,         1,  1,         1],
                [1, 0,  0, 333333333,  1, 333333333],
                [1, 0,  0, 666666666,  1, 666666666],
                [1, 0,  1,         0,  2,         0],
                [1, 0,  2,         0,  3,         0],
                [1, 0,  3,         0,  4,         0],
                [1, 0,  3, 333333333,  4, 333333333],

                [2, 0, -4, 666666667, -2, 666666667],
                [2, 0, -3,         0, -1,         0],
                [2, 0, -2,         0,  0,         0],
                [2, 0, -1,         0,  1,         0],
                [2, 0, -1, 333333334,  1, 333333334],
                [2, 0, -1, 666666667,  1, 666666667],
                [2, 0, -1, 999999999,  1, 999999999],
                [2, 0,  0,         0,  2,         0],
                [2, 0,  0,         1,  2,         1],
                [2, 0,  0, 333333333,  2, 333333333],
                [2, 0,  0, 666666666,  2, 666666666],
                [2, 0,  1,         0,  3,         0],
                [2, 0,  2,         0,  4,         0],
                [2, 0,  3,         0,  5,         0],
                [2, 0,  3, 333333333,  5, 333333333],

                [3, 0, -4, 666666667, -1, 666666667],
                [3, 0, -3,         0,  0,         0],
                [3, 0, -2,         0,  1,         0],
                [3, 0, -1,         0,  2,         0],
                [3, 0, -1, 333333334,  2, 333333334],
                [3, 0, -1, 666666667,  2, 666666667],
                [3, 0, -1, 999999999,  2, 999999999],
                [3, 0,  0,         0,  3,         0],
                [3, 0,  0,         1,  3,         1],
                [3, 0,  0, 333333333,  3, 333333333],
                [3, 0,  0, 666666666,  3, 666666666],
                [3, 0,  1,         0,  4,         0],
                [3, 0,  2,         0,  5,         0],
                [3, 0,  3,         0,  6,         0],
                [3, 0,  3, 333333333,  6, 333333333],

                [3, 333333333, -4, 666666667,  0,         0],
                [3, 333333333, -3,         0,  0, 333333333],
                [3, 333333333, -2,         0,  1, 333333333],
                [3, 333333333, -1,         0,  2, 333333333],
                [3, 333333333, -1, 333333334,  2, 666666667],
                [3, 333333333, -1, 666666667,  3,         0],
                [3, 333333333, -1, 999999999,  3, 333333332],
                [3, 333333333,  0,         0,  3, 333333333],
                [3, 333333333,  0,         1,  3, 333333334],
                [3, 333333333,  0, 333333333,  3, 666666666],
                [3, 333333333,  0, 666666666,  3, 999999999],
                [3, 333333333,  1,         0,  4, 333333333],
                [3, 333333333,  2,         0,  5, 333333333],
                [3, 333333333,  3,         0,  6, 333333333],
                [3, 333333333,  3, 333333333,  6, 666666666],

                [MAX_SECOND - 1, 0, 1, 0, MAX_SECOND, 0],
                [MAX_SECOND - 1, 0, 0, 500, MAX_SECOND - 1, 500],
                [MAX_SECOND - 1, 0, 0, 1000000000, MAX_SECOND, 0],

                [MAX_SECOND, 0, -1, 0, MAX_SECOND - 1, 0],
                [MAX_SECOND, 0, 0, -500, MAX_SECOND - 1, 999999500],
                [MAX_SECOND, 0, 0, -1000000000, MAX_SECOND - 1, 0],

                [MAX_SECOND, 0, -MAX_SECOND, 0, 0, 0]
            ];

        });

        it('plus_secondsPlusNanos', () => {
            for(var plusData of dataProviderPlus){
                plus_secondsPlusNanos.apply(this, plusData);
            }
        });

        function plus_secondsPlusNanos(seconds, nanos, otherSeconds, otherNanos, expectedSeconds, expectedNanoOfSecond){
            var instant = Instant.ofEpochSecond(seconds, nanos).plusSeconds(otherSeconds).plusNanos(otherNanos);
            expect(instant.epochSecond()).to.equal(expectedSeconds);
            expect(instant.nano()).to.equal(expectedNanoOfSecond);
        };

        it('plus_longTemporalUnit_overflowTooBig', () => {
            var instant = Instant.ofEpochSecond(MAX_SECOND, 999999999);
            expect(()=>{
                instant.plusNanos(1);
            }).to.throw(DateTimeException);
        });

        it('plus_longTemporalUnit_overflowTooSmall', () => {
            var instant = Instant.ofEpochSecond(MIN_SECOND);
            expect(()=>{
                instant.plusNanos(999999999);
                instant.plusSeconds(-1);
            }).to.throw(DateTimeException);
        });
    });
});

