{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "requireNonNull",
            "range": [
              237,
              251
            ],
            "loc": {
              "start": {
                "line": 7,
                "column": 8
              },
              "end": {
                "line": 7,
                "column": 22
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "requireNonNull",
            "range": [
              237,
              251
            ],
            "loc": {
              "start": {
                "line": 7,
                "column": 8
              },
              "end": {
                "line": 7,
                "column": 22
              }
            }
          },
          "range": [
            237,
            251
          ],
          "loc": {
            "start": {
              "line": 7,
              "column": 8
            },
            "end": {
              "line": 7,
              "column": 22
            }
          }
        },
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "requireInstance",
            "range": [
              253,
              268
            ],
            "loc": {
              "start": {
                "line": 7,
                "column": 24
              },
              "end": {
                "line": 7,
                "column": 39
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "requireInstance",
            "range": [
              253,
              268
            ],
            "loc": {
              "start": {
                "line": 7,
                "column": 24
              },
              "end": {
                "line": 7,
                "column": 39
              }
            }
          },
          "range": [
            253,
            268
          ],
          "loc": {
            "start": {
              "line": 7,
              "column": 24
            },
            "end": {
              "line": 7,
              "column": 39
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../assert",
        "raw": "'../assert'",
        "range": [
          275,
          286
        ],
        "loc": {
          "start": {
            "line": 7,
            "column": 46
          },
          "end": {
            "line": 7,
            "column": 57
          }
        }
      },
      "range": [
        229,
        287
      ],
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 58
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n ",
          "range": [
            0,
            227
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ChronoField",
            "range": [
              297,
              308
            ],
            "loc": {
              "start": {
                "line": 9,
                "column": 8
              },
              "end": {
                "line": 9,
                "column": 19
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "ChronoField",
            "range": [
              297,
              308
            ],
            "loc": {
              "start": {
                "line": 9,
                "column": 8
              },
              "end": {
                "line": 9,
                "column": 19
              }
            }
          },
          "range": [
            297,
            308
          ],
          "loc": {
            "start": {
              "line": 9,
              "column": 8
            },
            "end": {
              "line": 9,
              "column": 19
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../temporal/ChronoField",
        "raw": "'../temporal/ChronoField'",
        "range": [
          315,
          340
        ],
        "loc": {
          "start": {
            "line": 9,
            "column": 26
          },
          "end": {
            "line": 9,
            "column": 51
          }
        }
      },
      "range": [
        289,
        341
      ],
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 9,
          "column": 52
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ChronoUnit",
            "range": [
              350,
              360
            ],
            "loc": {
              "start": {
                "line": 10,
                "column": 8
              },
              "end": {
                "line": 10,
                "column": 18
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "ChronoUnit",
            "range": [
              350,
              360
            ],
            "loc": {
              "start": {
                "line": 10,
                "column": 8
              },
              "end": {
                "line": 10,
                "column": 18
              }
            }
          },
          "range": [
            350,
            360
          ],
          "loc": {
            "start": {
              "line": 10,
              "column": 8
            },
            "end": {
              "line": 10,
              "column": 18
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../temporal/ChronoUnit",
        "raw": "'../temporal/ChronoUnit'",
        "range": [
          367,
          391
        ],
        "loc": {
          "start": {
            "line": 10,
            "column": 25
          },
          "end": {
            "line": 10,
            "column": 49
          }
        }
      },
      "range": [
        342,
        392
      ],
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 50
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "DateTimeFormatter",
            "range": [
              401,
              418
            ],
            "loc": {
              "start": {
                "line": 11,
                "column": 8
              },
              "end": {
                "line": 11,
                "column": 25
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "DateTimeFormatter",
            "range": [
              401,
              418
            ],
            "loc": {
              "start": {
                "line": 11,
                "column": 8
              },
              "end": {
                "line": 11,
                "column": 25
              }
            }
          },
          "range": [
            401,
            418
          ],
          "loc": {
            "start": {
              "line": 11,
              "column": 8
            },
            "end": {
              "line": 11,
              "column": 25
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../format/DateTimeFormatter",
        "raw": "'../format/DateTimeFormatter'",
        "range": [
          425,
          454
        ],
        "loc": {
          "start": {
            "line": 11,
            "column": 32
          },
          "end": {
            "line": 11,
            "column": 61
          }
        }
      },
      "range": [
        393,
        455
      ],
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 11,
          "column": 62
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "TemporalQueries",
            "range": [
              464,
              479
            ],
            "loc": {
              "start": {
                "line": 12,
                "column": 8
              },
              "end": {
                "line": 12,
                "column": 23
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "TemporalQueries",
            "range": [
              464,
              479
            ],
            "loc": {
              "start": {
                "line": 12,
                "column": 8
              },
              "end": {
                "line": 12,
                "column": 23
              }
            }
          },
          "range": [
            464,
            479
          ],
          "loc": {
            "start": {
              "line": 12,
              "column": 8
            },
            "end": {
              "line": 12,
              "column": 23
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../temporal/TemporalQueries",
        "raw": "'../temporal/TemporalQueries'",
        "range": [
          486,
          515
        ],
        "loc": {
          "start": {
            "line": 12,
            "column": 30
          },
          "end": {
            "line": 12,
            "column": 59
          }
        }
      },
      "range": [
        456,
        516
      ],
      "loc": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 12,
          "column": 60
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "Temporal",
            "range": [
              525,
              533
            ],
            "loc": {
              "start": {
                "line": 13,
                "column": 8
              },
              "end": {
                "line": 13,
                "column": 16
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "Temporal",
            "range": [
              525,
              533
            ],
            "loc": {
              "start": {
                "line": 13,
                "column": 8
              },
              "end": {
                "line": 13,
                "column": 16
              }
            }
          },
          "range": [
            525,
            533
          ],
          "loc": {
            "start": {
              "line": 13,
              "column": 8
            },
            "end": {
              "line": 13,
              "column": 16
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../temporal/Temporal",
        "raw": "'../temporal/Temporal'",
        "range": [
          540,
          562
        ],
        "loc": {
          "start": {
            "line": 13,
            "column": 23
          },
          "end": {
            "line": 13,
            "column": 45
          }
        }
      },
      "range": [
        517,
        563
      ],
      "loc": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 13,
          "column": 46
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "LocalDate",
            "range": [
              573,
              582
            ],
            "loc": {
              "start": {
                "line": 15,
                "column": 8
              },
              "end": {
                "line": 15,
                "column": 17
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "LocalDate",
            "range": [
              573,
              582
            ],
            "loc": {
              "start": {
                "line": 15,
                "column": 8
              },
              "end": {
                "line": 15,
                "column": 17
              }
            }
          },
          "range": [
            573,
            582
          ],
          "loc": {
            "start": {
              "line": 15,
              "column": 8
            },
            "end": {
              "line": 15,
              "column": 17
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../LocalDate",
        "raw": "'../LocalDate'",
        "range": [
          589,
          603
        ],
        "loc": {
          "start": {
            "line": 15,
            "column": 24
          },
          "end": {
            "line": 15,
            "column": 38
          }
        }
      },
      "range": [
        565,
        604
      ],
      "loc": {
        "start": {
          "line": 15,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 39
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * A date without time-of-day or time-zone in an arbitrary chronology, intended\n * for advanced globalization use cases.\n *\n * **Most applications should declare method signatures, fields and variables\n * as {@link LocalDate}, not this interface.**\n *\n * A {@link ChronoLocalDate} is the abstract representation of a date where the\n * {@link Chronology}, or calendar system, is pluggable.\n * The date is defined in terms of fields expressed by {@link TemporalField},\n * where most common implementations are defined in {@link ChronoField}.\n * The chronology defines how the calendar system operates and the meaning of\n * the standard fields.\n *\n * #### When to use this interface\n *\n * The design of the API encourages the use of {@link LocalDate} rather than this\n * interface, even in the case where the application needs to deal with multiple\n * calendar systems. The rationale for this is explored in the following documentation.\n *\n * The primary use case where this interface should be used is where the generic\n * type parameter `C` is fully defined as a specific chronology.\n * In that case, the assumptions of that chronology are known at development\n * time and specified in the code.\n *\n * When the chronology is defined in the generic type parameter as ? or otherwise\n * unknown at development time, the rest of the discussion below applies.\n *\n * To emphasize the point, declaring a method signature, field or variable as this\n * interface type can initially seem like the sensible way to globalize an application,\n * however it is usually the wrong approach.\n * As such, it should be considered an application-wide architectural decision to choose\n * to use this interface as opposed to {@link LocalDate}.\n *\n * #### Architectural issues to consider\n *\n * These are some of the points that must be considered before using this interface\n * throughout an application.\n *\n * 1) Applications using this interface, as opposed to using just {@link LocalDate},\n * face a significantly higher probability of bugs. This is because the calendar system\n * in use is not known at development time. A key cause of bugs is where the developer\n * applies assumptions from their day-to-day knowledge of the ISO calendar system\n * to code that is intended to deal with any arbitrary calendar system.\n * The section below outlines how those assumptions can cause problems\n * The primary mechanism for reducing this increased risk of bugs is a strong code review process.\n * This should also be considered a extra cost in maintenance for the lifetime of the code.\n *\n * 2) This interface does not enforce immutability of implementations.\n * While the implementation notes indicate that all implementations must be immutable\n * there is nothing in the code or type system to enforce this. Any method declared\n * to accept a {@link ChronoLocalDate} could therefore be passed a poorly or\n * maliciously written mutable implementation.\n *\n * 3) Applications using this interface  must consider the impact of eras.\n * {@link LocalDate} shields users from the concept of eras, by ensuring that `getYear()`\n * returns the proleptic year. That decision ensures that developers can think of\n * {@link LocalDate} instances as consisting of three fields - year, month-of-year and day-of-month.\n * By contrast, users of this interface must think of dates as consisting of four fields -\n * era, year-of-era, month-of-year and day-of-month. The extra era field is frequently\n * forgotten, yet it is of vital importance to dates in an arbitrary calendar system.\n * For example, in the Japanese calendar system, the era represents the reign of an Emperor.\n * Whenever one reign ends and another starts, the year-of-era is reset to one.\n *\n * 4) The only agreed international standard for passing a date between two systems\n * is the ISO-8601 standard which requires the ISO calendar system. Using this interface\n * throughout the application will inevitably lead to the requirement to pass the date\n * across a network or component boundary, requiring an application specific protocol or format.\n *\n * 5) Long term persistence, such as a database, will almost always only accept dates in the\n * ISO-8601 calendar system (or the related Julian-Gregorian). Passing around dates in other\n * calendar systems increases the complications of interacting with persistence.\n *\n * 6) Most of the time, passing a {@link ChronoLocalDate} throughout an application\n * is unnecessary, as discussed in the last section below.\n *\n * #### False assumptions causing bugs in multi-calendar system code\n *\n * As indicated above, there are many issues to consider when try to use and manipulate a\n * date in an arbitrary calendar system. These are some of the key issues.\n *\n * Code that queries the day-of-month and assumes that the value will never be more than\n * 31 is invalid. Some calendar systems have more than 31 days in some months.\n *\n * Code that adds 12 months to a date and assumes that a year has been added is invalid.\n * Some calendar systems have a different number of months, such as 13 in the Coptic or Ethiopic.\n *\n * Code that adds one month to a date and assumes that the month-of-year value will increase\n * by one or wrap to the next year is invalid. Some calendar systems have a variable number\n * of months in a year, such as the Hebrew.\n *\n * Code that adds one month, then adds a second one month and assumes that the day-of-month\n * will remain close to its original value is invalid. Some calendar systems have a large difference\n * between the length of the longest month and the length of the shortest month.\n * For example, the Coptic or Ethiopic have 12 months of 30 days and 1 month of 5 days.\n *\n * Code that adds seven days and assumes that a week has been added is invalid.\n * Some calendar systems have weeks of other than seven days, such as the French Revolutionary.\n *\n * Code that assumes that because the year of `date1` is greater than the year of `date2`\n * then `date1` is after `date2` is invalid. This is invalid for all calendar systems\n * when referring to the year-of-era, and especially untrue of the Japanese calendar system\n * where the year-of-era restarts with the reign of every new Emperor.\n *\n * Code that treats month-of-year one and day-of-month one as the start of the year is invalid.\n * Not all calendar systems start the year when the month value is one.\n *\n * In general, manipulating a date, and even querying a date, is wide open to bugs when the\n * calendar system is unknown at development time. This is why it is essential that code using\n * this interface is subjected to additional code reviews. It is also why an architectural\n * decision to avoid this interface type is usually the correct one.\n *\n * #### Using LocalDate instead\n *\n * The primary alternative to using this interface throughout your application is as follows.\n *\n * * Declare all method signatures referring to dates in terms of {@link LocalDate}.\n * * Either store the chronology (calendar system) in the user profile or lookup the chronology\n *   from the user locale.\n * * Convert the ISO {@link LocalDate} to and from the user's preferred calendar system during\n *   printing and parsing.\n *\n * This approach treats the problem of globalized calendar systems as a localization issue\n * and confines it to the UI layer. This approach is in keeping with other localization\n * issues in the java platform.\n *\n * As discussed above, performing calculations on a date where the rules of the calendar system\n * are pluggable requires skill and is not recommended.\n * Fortunately, the need to perform calculations on a date in an arbitrary calendar system\n * is extremely rare. For example, it is highly unlikely that the business rules of a library\n * book rental scheme will allow rentals to be for one month, where meaning of the month\n * is dependent on the user's preferred calendar system.\n *\n * A key use case for calculations on a date in an arbitrary calendar system is producing\n * a month-by-month calendar for display and user interaction. Again, this is a UI issue,\n * and use of this interface solely within a few methods of the UI layer may be justified.\n *\n * In any other part of the system, where a date must be manipulated in a calendar system\n * other than ISO, the use case will generally specify the calendar system to use.\n * For example, an application may need to calculate the next Islamic or Hebrew holiday\n * which may require manipulating the date.\n * This kind of use case can be handled as follows:\n *\n * * start from the ISO {@link LocalDate} being passed to the method\n * * convert the date to the alternate calendar system, which for this use case is known\n *   rather than arbitrary\n * * perform the calculation\n * * convert back to {@link LocalDate}\n *\n * Developers writing low-level frameworks or libraries should also avoid this interface.\n * Instead, one of the two general purpose access interfaces should be used.\n * Use {@link TemporalAccessor} if read-only access is required, or use {@link Temporal}\n * if read-write access is required.\n *\n * ### Specification for implementors\n *\n * This interface must be implemented with care to ensure other classes operate correctly.\n * All implementations that can be instantiated must be final, immutable and thread-safe.\n * Subclasses should be Serializable wherever possible.\n *\n * Additional calendar systems may be added to the system.\n * See {@link Chronology} for more details.\n *\n * In JDK 8, this is an interface with default methods.\n * Since there are no default methods in JDK 7, an abstract class is used.\n ",
          "range": [
            606,
            10217
          ],
          "loc": {
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 182,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "ClassDeclaration",
        "id": {
          "type": "Identifier",
          "name": "ChronoLocalDate",
          "range": [
            10231,
            10246
          ],
          "loc": {
            "start": {
              "line": 183,
              "column": 13
            },
            "end": {
              "line": 183,
              "column": 28
            }
          }
        },
        "superClass": {
          "type": "Identifier",
          "name": "Temporal",
          "range": [
            10255,
            10263
          ],
          "loc": {
            "start": {
              "line": 183,
              "column": 37
            },
            "end": {
              "line": 183,
              "column": 45
            }
          }
        },
        "body": {
          "type": "ClassBody",
          "body": [
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "isSupported",
                "range": [
                  10271,
                  10282
                ],
                "loc": {
                  "start": {
                    "line": 185,
                    "column": 4
                  },
                  "end": {
                    "line": 185,
                    "column": 15
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "fieldOrUnit",
                    "range": [
                      10283,
                      10294
                    ],
                    "loc": {
                      "start": {
                        "line": 185,
                        "column": 16
                      },
                      "end": {
                        "line": 185,
                        "column": 27
                      }
                    }
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "instanceof",
                        "left": {
                          "type": "Identifier",
                          "name": "fieldOrUnit",
                          "range": [
                            10310,
                            10321
                          ],
                          "loc": {
                            "start": {
                              "line": 186,
                              "column": 12
                            },
                            "end": {
                              "line": 186,
                              "column": 23
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "ChronoField",
                          "range": [
                            10333,
                            10344
                          ],
                          "loc": {
                            "start": {
                              "line": 186,
                              "column": 35
                            },
                            "end": {
                              "line": 186,
                              "column": 46
                            }
                          }
                        },
                        "range": [
                          10310,
                          10344
                        ],
                        "loc": {
                          "start": {
                            "line": 186,
                            "column": 12
                          },
                          "end": {
                            "line": 186,
                            "column": 46
                          }
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "fieldOrUnit",
                                  "range": [
                                    10367,
                                    10378
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 187,
                                      "column": 19
                                    },
                                    "end": {
                                      "line": 187,
                                      "column": 30
                                    }
                                  }
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "isDateBased",
                                  "range": [
                                    10379,
                                    10390
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 187,
                                      "column": 31
                                    },
                                    "end": {
                                      "line": 187,
                                      "column": 42
                                    }
                                  }
                                },
                                "range": [
                                  10367,
                                  10390
                                ],
                                "loc": {
                                  "start": {
                                    "line": 187,
                                    "column": 19
                                  },
                                  "end": {
                                    "line": 187,
                                    "column": 42
                                  }
                                }
                              },
                              "arguments": [],
                              "range": [
                                10367,
                                10392
                              ],
                              "loc": {
                                "start": {
                                  "line": 187,
                                  "column": 19
                                },
                                "end": {
                                  "line": 187,
                                  "column": 44
                                }
                              }
                            },
                            "range": [
                              10360,
                              10393
                            ],
                            "loc": {
                              "start": {
                                "line": 187,
                                "column": 12
                              },
                              "end": {
                                "line": 187,
                                "column": 45
                              }
                            }
                          }
                        ],
                        "range": [
                          10346,
                          10403
                        ],
                        "loc": {
                          "start": {
                            "line": 186,
                            "column": 48
                          },
                          "end": {
                            "line": 188,
                            "column": 9
                          }
                        }
                      },
                      "alternate": {
                        "type": "IfStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "instanceof",
                          "left": {
                            "type": "Identifier",
                            "name": "fieldOrUnit",
                            "range": [
                              10413,
                              10424
                            ],
                            "loc": {
                              "start": {
                                "line": 188,
                                "column": 19
                              },
                              "end": {
                                "line": 188,
                                "column": 30
                              }
                            }
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "ChronoUnit",
                            "range": [
                              10436,
                              10446
                            ],
                            "loc": {
                              "start": {
                                "line": 188,
                                "column": 42
                              },
                              "end": {
                                "line": 188,
                                "column": 52
                              }
                            }
                          },
                          "range": [
                            10413,
                            10446
                          ],
                          "loc": {
                            "start": {
                              "line": 188,
                              "column": 19
                            },
                            "end": {
                              "line": 188,
                              "column": 52
                            }
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "fieldOrUnit",
                                    "range": [
                                      10469,
                                      10480
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 189,
                                        "column": 19
                                      },
                                      "end": {
                                        "line": 189,
                                        "column": 30
                                      }
                                    }
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "isDateBased",
                                    "range": [
                                      10481,
                                      10492
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 189,
                                        "column": 31
                                      },
                                      "end": {
                                        "line": 189,
                                        "column": 42
                                      }
                                    }
                                  },
                                  "range": [
                                    10469,
                                    10492
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 189,
                                      "column": 19
                                    },
                                    "end": {
                                      "line": 189,
                                      "column": 42
                                    }
                                  }
                                },
                                "arguments": [],
                                "range": [
                                  10469,
                                  10494
                                ],
                                "loc": {
                                  "start": {
                                    "line": 189,
                                    "column": 19
                                  },
                                  "end": {
                                    "line": 189,
                                    "column": 44
                                  }
                                }
                              },
                              "range": [
                                10462,
                                10495
                              ],
                              "loc": {
                                "start": {
                                  "line": 189,
                                  "column": 12
                                },
                                "end": {
                                  "line": 189,
                                  "column": 45
                                }
                              }
                            }
                          ],
                          "range": [
                            10448,
                            10505
                          ],
                          "loc": {
                            "start": {
                              "line": 188,
                              "column": 54
                            },
                            "end": {
                              "line": 190,
                              "column": 9
                            }
                          }
                        },
                        "alternate": null,
                        "range": [
                          10409,
                          10505
                        ],
                        "loc": {
                          "start": {
                            "line": 188,
                            "column": 15
                          },
                          "end": {
                            "line": 190,
                            "column": 9
                          }
                        }
                      },
                      "range": [
                        10306,
                        10505
                      ],
                      "loc": {
                        "start": {
                          "line": 186,
                          "column": 8
                        },
                        "end": {
                          "line": 190,
                          "column": 9
                        }
                      }
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "!=",
                          "left": {
                            "type": "Identifier",
                            "name": "fieldOrUnit",
                            "range": [
                              10521,
                              10532
                            ],
                            "loc": {
                              "start": {
                                "line": 191,
                                "column": 15
                              },
                              "end": {
                                "line": 191,
                                "column": 26
                              }
                            }
                          },
                          "right": {
                            "type": "Literal",
                            "value": null,
                            "raw": "null",
                            "range": [
                              10536,
                              10540
                            ],
                            "loc": {
                              "start": {
                                "line": 191,
                                "column": 30
                              },
                              "end": {
                                "line": 191,
                                "column": 34
                              }
                            }
                          },
                          "range": [
                            10521,
                            10540
                          ],
                          "loc": {
                            "start": {
                              "line": 191,
                              "column": 15
                            },
                            "end": {
                              "line": 191,
                              "column": 34
                            }
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "fieldOrUnit",
                              "range": [
                                10544,
                                10555
                              ],
                              "loc": {
                                "start": {
                                  "line": 191,
                                  "column": 38
                                },
                                "end": {
                                  "line": 191,
                                  "column": 49
                                }
                              }
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "isSupportedBy",
                              "range": [
                                10556,
                                10569
                              ],
                              "loc": {
                                "start": {
                                  "line": 191,
                                  "column": 50
                                },
                                "end": {
                                  "line": 191,
                                  "column": 63
                                }
                              }
                            },
                            "range": [
                              10544,
                              10569
                            ],
                            "loc": {
                              "start": {
                                "line": 191,
                                "column": 38
                              },
                              "end": {
                                "line": 191,
                                "column": 63
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "ThisExpression",
                              "range": [
                                10570,
                                10574
                              ],
                              "loc": {
                                "start": {
                                  "line": 191,
                                  "column": 64
                                },
                                "end": {
                                  "line": 191,
                                  "column": 68
                                }
                              }
                            }
                          ],
                          "range": [
                            10544,
                            10575
                          ],
                          "loc": {
                            "start": {
                              "line": 191,
                              "column": 38
                            },
                            "end": {
                              "line": 191,
                              "column": 69
                            }
                          }
                        },
                        "range": [
                          10521,
                          10575
                        ],
                        "loc": {
                          "start": {
                            "line": 191,
                            "column": 15
                          },
                          "end": {
                            "line": 191,
                            "column": 69
                          }
                        }
                      },
                      "range": [
                        10514,
                        10576
                      ],
                      "loc": {
                        "start": {
                          "line": 191,
                          "column": 8
                        },
                        "end": {
                          "line": 191,
                          "column": 70
                        }
                      }
                    }
                  ],
                  "range": [
                    10296,
                    10582
                  ],
                  "loc": {
                    "start": {
                      "line": 185,
                      "column": 29
                    },
                    "end": {
                      "line": 192,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  10282,
                  10582
                ],
                "loc": {
                  "start": {
                    "line": 185,
                    "column": 15
                  },
                  "end": {
                    "line": 192,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                10271,
                10582
              ],
              "loc": {
                "start": {
                  "line": 185,
                  "column": 4
                },
                "end": {
                  "line": 192,
                  "column": 5
                }
              },
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "query",
                "range": [
                  10588,
                  10593
                ],
                "loc": {
                  "start": {
                    "line": 194,
                    "column": 4
                  },
                  "end": {
                    "line": 194,
                    "column": 9
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "query",
                    "range": [
                      10594,
                      10599
                    ],
                    "loc": {
                      "start": {
                        "line": 194,
                        "column": 10
                      },
                      "end": {
                        "line": 194,
                        "column": 15
                      }
                    }
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "Identifier",
                          "name": "query",
                          "range": [
                            10615,
                            10620
                          ],
                          "loc": {
                            "start": {
                              "line": 195,
                              "column": 12
                            },
                            "end": {
                              "line": 195,
                              "column": 17
                            }
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "TemporalQueries",
                              "range": [
                                10625,
                                10640
                              ],
                              "loc": {
                                "start": {
                                  "line": 195,
                                  "column": 22
                                },
                                "end": {
                                  "line": 195,
                                  "column": 37
                                }
                              }
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "chronology",
                              "range": [
                                10641,
                                10651
                              ],
                              "loc": {
                                "start": {
                                  "line": 195,
                                  "column": 38
                                },
                                "end": {
                                  "line": 195,
                                  "column": 48
                                }
                              }
                            },
                            "range": [
                              10625,
                              10651
                            ],
                            "loc": {
                              "start": {
                                "line": 195,
                                "column": 22
                              },
                              "end": {
                                "line": 195,
                                "column": 48
                              }
                            }
                          },
                          "arguments": [],
                          "range": [
                            10625,
                            10653
                          ],
                          "loc": {
                            "start": {
                              "line": 195,
                              "column": 22
                            },
                            "end": {
                              "line": 195,
                              "column": 50
                            }
                          }
                        },
                        "range": [
                          10615,
                          10653
                        ],
                        "loc": {
                          "start": {
                            "line": 195,
                            "column": 12
                          },
                          "end": {
                            "line": 195,
                            "column": 50
                          }
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "ThisExpression",
                                  "range": [
                                    10676,
                                    10680
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 196,
                                      "column": 19
                                    },
                                    "end": {
                                      "line": 196,
                                      "column": 23
                                    }
                                  }
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "chronology",
                                  "range": [
                                    10681,
                                    10691
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 196,
                                      "column": 24
                                    },
                                    "end": {
                                      "line": 196,
                                      "column": 34
                                    }
                                  }
                                },
                                "range": [
                                  10676,
                                  10691
                                ],
                                "loc": {
                                  "start": {
                                    "line": 196,
                                    "column": 19
                                  },
                                  "end": {
                                    "line": 196,
                                    "column": 34
                                  }
                                }
                              },
                              "arguments": [],
                              "range": [
                                10676,
                                10693
                              ],
                              "loc": {
                                "start": {
                                  "line": 196,
                                  "column": 19
                                },
                                "end": {
                                  "line": 196,
                                  "column": 36
                                }
                              }
                            },
                            "range": [
                              10669,
                              10694
                            ],
                            "loc": {
                              "start": {
                                "line": 196,
                                "column": 12
                              },
                              "end": {
                                "line": 196,
                                "column": 37
                              }
                            }
                          }
                        ],
                        "range": [
                          10655,
                          10704
                        ],
                        "loc": {
                          "start": {
                            "line": 195,
                            "column": 52
                          },
                          "end": {
                            "line": 197,
                            "column": 9
                          }
                        }
                      },
                      "alternate": {
                        "type": "IfStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Identifier",
                            "name": "query",
                            "range": [
                              10714,
                              10719
                            ],
                            "loc": {
                              "start": {
                                "line": 197,
                                "column": 19
                              },
                              "end": {
                                "line": 197,
                                "column": 24
                              }
                            }
                          },
                          "right": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "TemporalQueries",
                                "range": [
                                  10724,
                                  10739
                                ],
                                "loc": {
                                  "start": {
                                    "line": 197,
                                    "column": 29
                                  },
                                  "end": {
                                    "line": 197,
                                    "column": 44
                                  }
                                }
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "precision",
                                "range": [
                                  10740,
                                  10749
                                ],
                                "loc": {
                                  "start": {
                                    "line": 197,
                                    "column": 45
                                  },
                                  "end": {
                                    "line": 197,
                                    "column": 54
                                  }
                                }
                              },
                              "range": [
                                10724,
                                10749
                              ],
                              "loc": {
                                "start": {
                                  "line": 197,
                                  "column": 29
                                },
                                "end": {
                                  "line": 197,
                                  "column": 54
                                }
                              }
                            },
                            "arguments": [],
                            "range": [
                              10724,
                              10751
                            ],
                            "loc": {
                              "start": {
                                "line": 197,
                                "column": 29
                              },
                              "end": {
                                "line": 197,
                                "column": 56
                              }
                            }
                          },
                          "range": [
                            10714,
                            10751
                          ],
                          "loc": {
                            "start": {
                              "line": 197,
                              "column": 19
                            },
                            "end": {
                              "line": 197,
                              "column": 56
                            }
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "ChronoUnit",
                                  "range": [
                                    10774,
                                    10784
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 198,
                                      "column": 19
                                    },
                                    "end": {
                                      "line": 198,
                                      "column": 29
                                    }
                                  }
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "DAYS",
                                  "range": [
                                    10785,
                                    10789
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 198,
                                      "column": 30
                                    },
                                    "end": {
                                      "line": 198,
                                      "column": 34
                                    }
                                  }
                                },
                                "range": [
                                  10774,
                                  10789
                                ],
                                "loc": {
                                  "start": {
                                    "line": 198,
                                    "column": 19
                                  },
                                  "end": {
                                    "line": 198,
                                    "column": 34
                                  }
                                }
                              },
                              "range": [
                                10767,
                                10790
                              ],
                              "loc": {
                                "start": {
                                  "line": 198,
                                  "column": 12
                                },
                                "end": {
                                  "line": 198,
                                  "column": 35
                                }
                              }
                            }
                          ],
                          "range": [
                            10753,
                            10800
                          ],
                          "loc": {
                            "start": {
                              "line": 197,
                              "column": 58
                            },
                            "end": {
                              "line": 199,
                              "column": 9
                            }
                          }
                        },
                        "alternate": {
                          "type": "IfStatement",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "Identifier",
                              "name": "query",
                              "range": [
                                10810,
                                10815
                              ],
                              "loc": {
                                "start": {
                                  "line": 199,
                                  "column": 19
                                },
                                "end": {
                                  "line": 199,
                                  "column": 24
                                }
                              }
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "TemporalQueries",
                                  "range": [
                                    10820,
                                    10835
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 199,
                                      "column": 29
                                    },
                                    "end": {
                                      "line": 199,
                                      "column": 44
                                    }
                                  }
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "localDate",
                                  "range": [
                                    10836,
                                    10845
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 199,
                                      "column": 45
                                    },
                                    "end": {
                                      "line": 199,
                                      "column": 54
                                    }
                                  }
                                },
                                "range": [
                                  10820,
                                  10845
                                ],
                                "loc": {
                                  "start": {
                                    "line": 199,
                                    "column": 29
                                  },
                                  "end": {
                                    "line": 199,
                                    "column": 54
                                  }
                                }
                              },
                              "arguments": [],
                              "range": [
                                10820,
                                10847
                              ],
                              "loc": {
                                "start": {
                                  "line": 199,
                                  "column": 29
                                },
                                "end": {
                                  "line": 199,
                                  "column": 56
                                }
                              }
                            },
                            "range": [
                              10810,
                              10847
                            ],
                            "loc": {
                              "start": {
                                "line": 199,
                                "column": 19
                              },
                              "end": {
                                "line": 199,
                                "column": 56
                              }
                            }
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "LocalDate",
                                      "range": [
                                        10870,
                                        10879
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 200,
                                          "column": 19
                                        },
                                        "end": {
                                          "line": 200,
                                          "column": 28
                                        }
                                      }
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "ofEpochDay",
                                      "range": [
                                        10880,
                                        10890
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 200,
                                          "column": 29
                                        },
                                        "end": {
                                          "line": 200,
                                          "column": 39
                                        }
                                      }
                                    },
                                    "range": [
                                      10870,
                                      10890
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 200,
                                        "column": 19
                                      },
                                      "end": {
                                        "line": 200,
                                        "column": 39
                                      }
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "ThisExpression",
                                          "range": [
                                            10891,
                                            10895
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 200,
                                              "column": 40
                                            },
                                            "end": {
                                              "line": 200,
                                              "column": 44
                                            }
                                          }
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "toEpochDay",
                                          "range": [
                                            10896,
                                            10906
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 200,
                                              "column": 45
                                            },
                                            "end": {
                                              "line": 200,
                                              "column": 55
                                            }
                                          }
                                        },
                                        "range": [
                                          10891,
                                          10906
                                        ],
                                        "loc": {
                                          "start": {
                                            "line": 200,
                                            "column": 40
                                          },
                                          "end": {
                                            "line": 200,
                                            "column": 55
                                          }
                                        }
                                      },
                                      "arguments": [],
                                      "range": [
                                        10891,
                                        10908
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 200,
                                          "column": 40
                                        },
                                        "end": {
                                          "line": 200,
                                          "column": 57
                                        }
                                      }
                                    }
                                  ],
                                  "range": [
                                    10870,
                                    10909
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 200,
                                      "column": 19
                                    },
                                    "end": {
                                      "line": 200,
                                      "column": 58
                                    }
                                  }
                                },
                                "range": [
                                  10863,
                                  10910
                                ],
                                "loc": {
                                  "start": {
                                    "line": 200,
                                    "column": 12
                                  },
                                  "end": {
                                    "line": 200,
                                    "column": 59
                                  }
                                }
                              }
                            ],
                            "range": [
                              10849,
                              10920
                            ],
                            "loc": {
                              "start": {
                                "line": 199,
                                "column": 58
                              },
                              "end": {
                                "line": 201,
                                "column": 9
                              }
                            }
                          },
                          "alternate": {
                            "type": "IfStatement",
                            "test": {
                              "type": "LogicalExpression",
                              "operator": "||",
                              "left": {
                                "type": "LogicalExpression",
                                "operator": "||",
                                "left": {
                                  "type": "LogicalExpression",
                                  "operator": "||",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "query",
                                      "range": [
                                        10930,
                                        10935
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 201,
                                          "column": 19
                                        },
                                        "end": {
                                          "line": 201,
                                          "column": 24
                                        }
                                      }
                                    },
                                    "right": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "TemporalQueries",
                                          "range": [
                                            10940,
                                            10955
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 201,
                                              "column": 29
                                            },
                                            "end": {
                                              "line": 201,
                                              "column": 44
                                            }
                                          }
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "localTime",
                                          "range": [
                                            10956,
                                            10965
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 201,
                                              "column": 45
                                            },
                                            "end": {
                                              "line": 201,
                                              "column": 54
                                            }
                                          }
                                        },
                                        "range": [
                                          10940,
                                          10965
                                        ],
                                        "loc": {
                                          "start": {
                                            "line": 201,
                                            "column": 29
                                          },
                                          "end": {
                                            "line": 201,
                                            "column": 54
                                          }
                                        }
                                      },
                                      "arguments": [],
                                      "range": [
                                        10940,
                                        10967
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 201,
                                          "column": 29
                                        },
                                        "end": {
                                          "line": 201,
                                          "column": 56
                                        }
                                      }
                                    },
                                    "range": [
                                      10930,
                                      10967
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 201,
                                        "column": 19
                                      },
                                      "end": {
                                        "line": 201,
                                        "column": 56
                                      }
                                    }
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "query",
                                      "range": [
                                        10971,
                                        10976
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 201,
                                          "column": 60
                                        },
                                        "end": {
                                          "line": 201,
                                          "column": 65
                                        }
                                      }
                                    },
                                    "right": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "TemporalQueries",
                                          "range": [
                                            10981,
                                            10996
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 201,
                                              "column": 70
                                            },
                                            "end": {
                                              "line": 201,
                                              "column": 85
                                            }
                                          }
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "zone",
                                          "range": [
                                            10997,
                                            11001
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 201,
                                              "column": 86
                                            },
                                            "end": {
                                              "line": 201,
                                              "column": 90
                                            }
                                          }
                                        },
                                        "range": [
                                          10981,
                                          11001
                                        ],
                                        "loc": {
                                          "start": {
                                            "line": 201,
                                            "column": 70
                                          },
                                          "end": {
                                            "line": 201,
                                            "column": 90
                                          }
                                        }
                                      },
                                      "arguments": [],
                                      "range": [
                                        10981,
                                        11003
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 201,
                                          "column": 70
                                        },
                                        "end": {
                                          "line": 201,
                                          "column": 92
                                        }
                                      }
                                    },
                                    "range": [
                                      10971,
                                      11003
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 201,
                                        "column": 60
                                      },
                                      "end": {
                                        "line": 201,
                                        "column": 92
                                      }
                                    }
                                  },
                                  "range": [
                                    10930,
                                    11003
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 201,
                                      "column": 19
                                    },
                                    "end": {
                                      "line": 201,
                                      "column": 92
                                    }
                                  }
                                },
                                "right": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "query",
                                    "range": [
                                      11023,
                                      11028
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 202,
                                        "column": 16
                                      },
                                      "end": {
                                        "line": 202,
                                        "column": 21
                                      }
                                    }
                                  },
                                  "right": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "TemporalQueries",
                                        "range": [
                                          11033,
                                          11048
                                        ],
                                        "loc": {
                                          "start": {
                                            "line": 202,
                                            "column": 26
                                          },
                                          "end": {
                                            "line": 202,
                                            "column": 41
                                          }
                                        }
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "zoneId",
                                        "range": [
                                          11049,
                                          11055
                                        ],
                                        "loc": {
                                          "start": {
                                            "line": 202,
                                            "column": 42
                                          },
                                          "end": {
                                            "line": 202,
                                            "column": 48
                                          }
                                        }
                                      },
                                      "range": [
                                        11033,
                                        11055
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 202,
                                          "column": 26
                                        },
                                        "end": {
                                          "line": 202,
                                          "column": 48
                                        }
                                      }
                                    },
                                    "arguments": [],
                                    "range": [
                                      11033,
                                      11057
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 202,
                                        "column": 26
                                      },
                                      "end": {
                                        "line": 202,
                                        "column": 50
                                      }
                                    }
                                  },
                                  "range": [
                                    11023,
                                    11057
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 202,
                                      "column": 16
                                    },
                                    "end": {
                                      "line": 202,
                                      "column": 50
                                    }
                                  }
                                },
                                "range": [
                                  10930,
                                  11057
                                ],
                                "loc": {
                                  "start": {
                                    "line": 201,
                                    "column": 19
                                  },
                                  "end": {
                                    "line": 202,
                                    "column": 50
                                  }
                                }
                              },
                              "right": {
                                "type": "BinaryExpression",
                                "operator": "===",
                                "left": {
                                  "type": "Identifier",
                                  "name": "query",
                                  "range": [
                                    11061,
                                    11066
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 202,
                                      "column": 54
                                    },
                                    "end": {
                                      "line": 202,
                                      "column": 59
                                    }
                                  }
                                },
                                "right": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "TemporalQueries",
                                      "range": [
                                        11071,
                                        11086
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 202,
                                          "column": 64
                                        },
                                        "end": {
                                          "line": 202,
                                          "column": 79
                                        }
                                      }
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "offset",
                                      "range": [
                                        11087,
                                        11093
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 202,
                                          "column": 80
                                        },
                                        "end": {
                                          "line": 202,
                                          "column": 86
                                        }
                                      }
                                    },
                                    "range": [
                                      11071,
                                      11093
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 202,
                                        "column": 64
                                      },
                                      "end": {
                                        "line": 202,
                                        "column": 86
                                      }
                                    }
                                  },
                                  "arguments": [],
                                  "range": [
                                    11071,
                                    11095
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 202,
                                      "column": 64
                                    },
                                    "end": {
                                      "line": 202,
                                      "column": 88
                                    }
                                  }
                                },
                                "range": [
                                  11061,
                                  11095
                                ],
                                "loc": {
                                  "start": {
                                    "line": 202,
                                    "column": 54
                                  },
                                  "end": {
                                    "line": 202,
                                    "column": 88
                                  }
                                }
                              },
                              "range": [
                                10930,
                                11095
                              ],
                              "loc": {
                                "start": {
                                  "line": 201,
                                  "column": 19
                                },
                                "end": {
                                  "line": 202,
                                  "column": 88
                                }
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null",
                                    "range": [
                                      11118,
                                      11122
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 203,
                                        "column": 19
                                      },
                                      "end": {
                                        "line": 203,
                                        "column": 23
                                      }
                                    }
                                  },
                                  "range": [
                                    11111,
                                    11123
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 203,
                                      "column": 12
                                    },
                                    "end": {
                                      "line": 203,
                                      "column": 24
                                    }
                                  }
                                }
                              ],
                              "range": [
                                11097,
                                11133
                              ],
                              "loc": {
                                "start": {
                                  "line": 202,
                                  "column": 90
                                },
                                "end": {
                                  "line": 204,
                                  "column": 9
                                }
                              }
                            },
                            "alternate": null,
                            "range": [
                              10926,
                              11133
                            ],
                            "loc": {
                              "start": {
                                "line": 201,
                                "column": 15
                              },
                              "end": {
                                "line": 204,
                                "column": 9
                              }
                            }
                          },
                          "range": [
                            10806,
                            11133
                          ],
                          "loc": {
                            "start": {
                              "line": 199,
                              "column": 15
                            },
                            "end": {
                              "line": 204,
                              "column": 9
                            }
                          }
                        },
                        "range": [
                          10710,
                          11133
                        ],
                        "loc": {
                          "start": {
                            "line": 197,
                            "column": 15
                          },
                          "end": {
                            "line": 204,
                            "column": 9
                          }
                        }
                      },
                      "range": [
                        10611,
                        11133
                      ],
                      "loc": {
                        "start": {
                          "line": 195,
                          "column": 8
                        },
                        "end": {
                          "line": 204,
                          "column": 9
                        }
                      }
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Super",
                            "range": [
                              11149,
                              11154
                            ],
                            "loc": {
                              "start": {
                                "line": 205,
                                "column": 15
                              },
                              "end": {
                                "line": 205,
                                "column": 20
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "query",
                            "range": [
                              11155,
                              11160
                            ],
                            "loc": {
                              "start": {
                                "line": 205,
                                "column": 21
                              },
                              "end": {
                                "line": 205,
                                "column": 26
                              }
                            }
                          },
                          "range": [
                            11149,
                            11160
                          ],
                          "loc": {
                            "start": {
                              "line": 205,
                              "column": 15
                            },
                            "end": {
                              "line": 205,
                              "column": 26
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "query",
                            "range": [
                              11161,
                              11166
                            ],
                            "loc": {
                              "start": {
                                "line": 205,
                                "column": 27
                              },
                              "end": {
                                "line": 205,
                                "column": 32
                              }
                            }
                          }
                        ],
                        "range": [
                          11149,
                          11167
                        ],
                        "loc": {
                          "start": {
                            "line": 205,
                            "column": 15
                          },
                          "end": {
                            "line": 205,
                            "column": 33
                          }
                        }
                      },
                      "range": [
                        11142,
                        11168
                      ],
                      "loc": {
                        "start": {
                          "line": 205,
                          "column": 8
                        },
                        "end": {
                          "line": 205,
                          "column": 34
                        }
                      }
                    }
                  ],
                  "range": [
                    10601,
                    11174
                  ],
                  "loc": {
                    "start": {
                      "line": 194,
                      "column": 17
                    },
                    "end": {
                      "line": 206,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  10593,
                  11174
                ],
                "loc": {
                  "start": {
                    "line": 194,
                    "column": 9
                  },
                  "end": {
                    "line": 206,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                10588,
                11174
              ],
              "loc": {
                "start": {
                  "line": 194,
                  "column": 4
                },
                "end": {
                  "line": 206,
                  "column": 5
                }
              },
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "adjustInto",
                "range": [
                  11180,
                  11190
                ],
                "loc": {
                  "start": {
                    "line": 208,
                    "column": 4
                  },
                  "end": {
                    "line": 208,
                    "column": 14
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "temporal",
                    "range": [
                      11191,
                      11199
                    ],
                    "loc": {
                      "start": {
                        "line": 208,
                        "column": 15
                      },
                      "end": {
                        "line": 208,
                        "column": 23
                      }
                    }
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "temporal",
                            "range": [
                              11218,
                              11226
                            ],
                            "loc": {
                              "start": {
                                "line": 209,
                                "column": 15
                              },
                              "end": {
                                "line": 209,
                                "column": 23
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "with",
                            "range": [
                              11227,
                              11231
                            ],
                            "loc": {
                              "start": {
                                "line": 209,
                                "column": 24
                              },
                              "end": {
                                "line": 209,
                                "column": 28
                              }
                            }
                          },
                          "range": [
                            11218,
                            11231
                          ],
                          "loc": {
                            "start": {
                              "line": 209,
                              "column": 15
                            },
                            "end": {
                              "line": 209,
                              "column": 28
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "ChronoField",
                              "range": [
                                11232,
                                11243
                              ],
                              "loc": {
                                "start": {
                                  "line": 209,
                                  "column": 29
                                },
                                "end": {
                                  "line": 209,
                                  "column": 40
                                }
                              }
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "EPOCH_DAY",
                              "range": [
                                11244,
                                11253
                              ],
                              "loc": {
                                "start": {
                                  "line": 209,
                                  "column": 41
                                },
                                "end": {
                                  "line": 209,
                                  "column": 50
                                }
                              }
                            },
                            "range": [
                              11232,
                              11253
                            ],
                            "loc": {
                              "start": {
                                "line": 209,
                                "column": 29
                              },
                              "end": {
                                "line": 209,
                                "column": 50
                              }
                            }
                          },
                          {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "ThisExpression",
                                "range": [
                                  11255,
                                  11259
                                ],
                                "loc": {
                                  "start": {
                                    "line": 209,
                                    "column": 52
                                  },
                                  "end": {
                                    "line": 209,
                                    "column": 56
                                  }
                                }
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "toEpochDay",
                                "range": [
                                  11260,
                                  11270
                                ],
                                "loc": {
                                  "start": {
                                    "line": 209,
                                    "column": 57
                                  },
                                  "end": {
                                    "line": 209,
                                    "column": 67
                                  }
                                }
                              },
                              "range": [
                                11255,
                                11270
                              ],
                              "loc": {
                                "start": {
                                  "line": 209,
                                  "column": 52
                                },
                                "end": {
                                  "line": 209,
                                  "column": 67
                                }
                              }
                            },
                            "arguments": [],
                            "range": [
                              11255,
                              11272
                            ],
                            "loc": {
                              "start": {
                                "line": 209,
                                "column": 52
                              },
                              "end": {
                                "line": 209,
                                "column": 69
                              }
                            }
                          }
                        ],
                        "range": [
                          11218,
                          11273
                        ],
                        "loc": {
                          "start": {
                            "line": 209,
                            "column": 15
                          },
                          "end": {
                            "line": 209,
                            "column": 70
                          }
                        }
                      },
                      "range": [
                        11211,
                        11274
                      ],
                      "loc": {
                        "start": {
                          "line": 209,
                          "column": 8
                        },
                        "end": {
                          "line": 209,
                          "column": 71
                        }
                      }
                    }
                  ],
                  "range": [
                    11201,
                    11280
                  ],
                  "loc": {
                    "start": {
                      "line": 208,
                      "column": 25
                    },
                    "end": {
                      "line": 210,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  11190,
                  11280
                ],
                "loc": {
                  "start": {
                    "line": 208,
                    "column": 14
                  },
                  "end": {
                    "line": 210,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                11180,
                11280
              ],
              "loc": {
                "start": {
                  "line": 208,
                  "column": 4
                },
                "end": {
                  "line": 210,
                  "column": 5
                }
              },
              "trailingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Formats this date using the specified formatter.\n     *\n     * This date will be passed to the formatter to produce a string.\n     *\n     * The default implementation must behave as follows:\n     * <pre>\n     *  return formatter.format(this);\n     * </pre>\n     *\n     * @param {DateTimeFormatter} formatter  the formatter to use, not null\n     * @return {String} the formatted date string, not null\n     * @throws DateTimeException if an error occurs during printing\n     ",
                  "range": [
                    11285,
                    11771
                  ],
                  "loc": {
                    "start": {
                      "line": 211,
                      "column": 4
                    },
                    "end": {
                      "line": 224,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "format",
                "range": [
                  11776,
                  11782
                ],
                "loc": {
                  "start": {
                    "line": 225,
                    "column": 4
                  },
                  "end": {
                    "line": 225,
                    "column": 10
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "formatter",
                    "range": [
                      11783,
                      11792
                    ],
                    "loc": {
                      "start": {
                        "line": 225,
                        "column": 11
                      },
                      "end": {
                        "line": 225,
                        "column": 20
                      }
                    }
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "requireNonNull",
                          "range": [
                            11804,
                            11818
                          ],
                          "loc": {
                            "start": {
                              "line": 226,
                              "column": 8
                            },
                            "end": {
                              "line": 226,
                              "column": 22
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "formatter",
                            "range": [
                              11819,
                              11828
                            ],
                            "loc": {
                              "start": {
                                "line": 226,
                                "column": 23
                              },
                              "end": {
                                "line": 226,
                                "column": 32
                              }
                            }
                          },
                          {
                            "type": "Literal",
                            "value": "formatter",
                            "raw": "'formatter'",
                            "range": [
                              11830,
                              11841
                            ],
                            "loc": {
                              "start": {
                                "line": 226,
                                "column": 34
                              },
                              "end": {
                                "line": 226,
                                "column": 45
                              }
                            }
                          }
                        ],
                        "range": [
                          11804,
                          11842
                        ],
                        "loc": {
                          "start": {
                            "line": 226,
                            "column": 8
                          },
                          "end": {
                            "line": 226,
                            "column": 46
                          }
                        }
                      },
                      "range": [
                        11804,
                        11843
                      ],
                      "loc": {
                        "start": {
                          "line": 226,
                          "column": 8
                        },
                        "end": {
                          "line": 226,
                          "column": 47
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "requireInstance",
                          "range": [
                            11852,
                            11867
                          ],
                          "loc": {
                            "start": {
                              "line": 227,
                              "column": 8
                            },
                            "end": {
                              "line": 227,
                              "column": 23
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "formatter",
                            "range": [
                              11868,
                              11877
                            ],
                            "loc": {
                              "start": {
                                "line": 227,
                                "column": 24
                              },
                              "end": {
                                "line": 227,
                                "column": 33
                              }
                            }
                          },
                          {
                            "type": "Identifier",
                            "name": "DateTimeFormatter",
                            "range": [
                              11879,
                              11896
                            ],
                            "loc": {
                              "start": {
                                "line": 227,
                                "column": 35
                              },
                              "end": {
                                "line": 227,
                                "column": 52
                              }
                            }
                          },
                          {
                            "type": "Literal",
                            "value": "formatter",
                            "raw": "'formatter'",
                            "range": [
                              11898,
                              11909
                            ],
                            "loc": {
                              "start": {
                                "line": 227,
                                "column": 54
                              },
                              "end": {
                                "line": 227,
                                "column": 65
                              }
                            }
                          }
                        ],
                        "range": [
                          11852,
                          11910
                        ],
                        "loc": {
                          "start": {
                            "line": 227,
                            "column": 8
                          },
                          "end": {
                            "line": 227,
                            "column": 66
                          }
                        }
                      },
                      "range": [
                        11852,
                        11911
                      ],
                      "loc": {
                        "start": {
                          "line": 227,
                          "column": 8
                        },
                        "end": {
                          "line": 227,
                          "column": 67
                        }
                      }
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "formatter",
                            "range": [
                              11927,
                              11936
                            ],
                            "loc": {
                              "start": {
                                "line": 228,
                                "column": 15
                              },
                              "end": {
                                "line": 228,
                                "column": 24
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "format",
                            "range": [
                              11937,
                              11943
                            ],
                            "loc": {
                              "start": {
                                "line": 228,
                                "column": 25
                              },
                              "end": {
                                "line": 228,
                                "column": 31
                              }
                            }
                          },
                          "range": [
                            11927,
                            11943
                          ],
                          "loc": {
                            "start": {
                              "line": 228,
                              "column": 15
                            },
                            "end": {
                              "line": 228,
                              "column": 31
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "ThisExpression",
                            "range": [
                              11944,
                              11948
                            ],
                            "loc": {
                              "start": {
                                "line": 228,
                                "column": 32
                              },
                              "end": {
                                "line": 228,
                                "column": 36
                              }
                            }
                          }
                        ],
                        "range": [
                          11927,
                          11949
                        ],
                        "loc": {
                          "start": {
                            "line": 228,
                            "column": 15
                          },
                          "end": {
                            "line": 228,
                            "column": 37
                          }
                        }
                      },
                      "range": [
                        11920,
                        11950
                      ],
                      "loc": {
                        "start": {
                          "line": 228,
                          "column": 8
                        },
                        "end": {
                          "line": 228,
                          "column": 38
                        }
                      }
                    }
                  ],
                  "range": [
                    11794,
                    11956
                  ],
                  "loc": {
                    "start": {
                      "line": 225,
                      "column": 22
                    },
                    "end": {
                      "line": 229,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  11782,
                  11956
                ],
                "loc": {
                  "start": {
                    "line": 225,
                    "column": 10
                  },
                  "end": {
                    "line": 229,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                11776,
                11956
              ],
              "loc": {
                "start": {
                  "line": 225,
                  "column": 4
                },
                "end": {
                  "line": 229,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Formats this date using the specified formatter.\n     *\n     * This date will be passed to the formatter to produce a string.\n     *\n     * The default implementation must behave as follows:\n     * <pre>\n     *  return formatter.format(this);\n     * </pre>\n     *\n     * @param {DateTimeFormatter} formatter  the formatter to use, not null\n     * @return {String} the formatted date string, not null\n     * @throws DateTimeException if an error occurs during printing\n     ",
                  "range": [
                    11285,
                    11771
                  ],
                  "loc": {
                    "start": {
                      "line": 211,
                      "column": 4
                    },
                    "end": {
                      "line": 224,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            }
          ],
          "range": [
            10264,
            11958
          ],
          "loc": {
            "start": {
              "line": 183,
              "column": 46
            },
            "end": {
              "line": 230,
              "column": 1
            }
          }
        },
        "range": [
          10225,
          11958
        ],
        "loc": {
          "start": {
            "line": 183,
            "column": 7
          },
          "end": {
            "line": 230,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * A date without time-of-day or time-zone in an arbitrary chronology, intended\n * for advanced globalization use cases.\n *\n * **Most applications should declare method signatures, fields and variables\n * as {@link LocalDate}, not this interface.**\n *\n * A {@link ChronoLocalDate} is the abstract representation of a date where the\n * {@link Chronology}, or calendar system, is pluggable.\n * The date is defined in terms of fields expressed by {@link TemporalField},\n * where most common implementations are defined in {@link ChronoField}.\n * The chronology defines how the calendar system operates and the meaning of\n * the standard fields.\n *\n * #### When to use this interface\n *\n * The design of the API encourages the use of {@link LocalDate} rather than this\n * interface, even in the case where the application needs to deal with multiple\n * calendar systems. The rationale for this is explored in the following documentation.\n *\n * The primary use case where this interface should be used is where the generic\n * type parameter `C` is fully defined as a specific chronology.\n * In that case, the assumptions of that chronology are known at development\n * time and specified in the code.\n *\n * When the chronology is defined in the generic type parameter as ? or otherwise\n * unknown at development time, the rest of the discussion below applies.\n *\n * To emphasize the point, declaring a method signature, field or variable as this\n * interface type can initially seem like the sensible way to globalize an application,\n * however it is usually the wrong approach.\n * As such, it should be considered an application-wide architectural decision to choose\n * to use this interface as opposed to {@link LocalDate}.\n *\n * #### Architectural issues to consider\n *\n * These are some of the points that must be considered before using this interface\n * throughout an application.\n *\n * 1) Applications using this interface, as opposed to using just {@link LocalDate},\n * face a significantly higher probability of bugs. This is because the calendar system\n * in use is not known at development time. A key cause of bugs is where the developer\n * applies assumptions from their day-to-day knowledge of the ISO calendar system\n * to code that is intended to deal with any arbitrary calendar system.\n * The section below outlines how those assumptions can cause problems\n * The primary mechanism for reducing this increased risk of bugs is a strong code review process.\n * This should also be considered a extra cost in maintenance for the lifetime of the code.\n *\n * 2) This interface does not enforce immutability of implementations.\n * While the implementation notes indicate that all implementations must be immutable\n * there is nothing in the code or type system to enforce this. Any method declared\n * to accept a {@link ChronoLocalDate} could therefore be passed a poorly or\n * maliciously written mutable implementation.\n *\n * 3) Applications using this interface  must consider the impact of eras.\n * {@link LocalDate} shields users from the concept of eras, by ensuring that `getYear()`\n * returns the proleptic year. That decision ensures that developers can think of\n * {@link LocalDate} instances as consisting of three fields - year, month-of-year and day-of-month.\n * By contrast, users of this interface must think of dates as consisting of four fields -\n * era, year-of-era, month-of-year and day-of-month. The extra era field is frequently\n * forgotten, yet it is of vital importance to dates in an arbitrary calendar system.\n * For example, in the Japanese calendar system, the era represents the reign of an Emperor.\n * Whenever one reign ends and another starts, the year-of-era is reset to one.\n *\n * 4) The only agreed international standard for passing a date between two systems\n * is the ISO-8601 standard which requires the ISO calendar system. Using this interface\n * throughout the application will inevitably lead to the requirement to pass the date\n * across a network or component boundary, requiring an application specific protocol or format.\n *\n * 5) Long term persistence, such as a database, will almost always only accept dates in the\n * ISO-8601 calendar system (or the related Julian-Gregorian). Passing around dates in other\n * calendar systems increases the complications of interacting with persistence.\n *\n * 6) Most of the time, passing a {@link ChronoLocalDate} throughout an application\n * is unnecessary, as discussed in the last section below.\n *\n * #### False assumptions causing bugs in multi-calendar system code\n *\n * As indicated above, there are many issues to consider when try to use and manipulate a\n * date in an arbitrary calendar system. These are some of the key issues.\n *\n * Code that queries the day-of-month and assumes that the value will never be more than\n * 31 is invalid. Some calendar systems have more than 31 days in some months.\n *\n * Code that adds 12 months to a date and assumes that a year has been added is invalid.\n * Some calendar systems have a different number of months, such as 13 in the Coptic or Ethiopic.\n *\n * Code that adds one month to a date and assumes that the month-of-year value will increase\n * by one or wrap to the next year is invalid. Some calendar systems have a variable number\n * of months in a year, such as the Hebrew.\n *\n * Code that adds one month, then adds a second one month and assumes that the day-of-month\n * will remain close to its original value is invalid. Some calendar systems have a large difference\n * between the length of the longest month and the length of the shortest month.\n * For example, the Coptic or Ethiopic have 12 months of 30 days and 1 month of 5 days.\n *\n * Code that adds seven days and assumes that a week has been added is invalid.\n * Some calendar systems have weeks of other than seven days, such as the French Revolutionary.\n *\n * Code that assumes that because the year of `date1` is greater than the year of `date2`\n * then `date1` is after `date2` is invalid. This is invalid for all calendar systems\n * when referring to the year-of-era, and especially untrue of the Japanese calendar system\n * where the year-of-era restarts with the reign of every new Emperor.\n *\n * Code that treats month-of-year one and day-of-month one as the start of the year is invalid.\n * Not all calendar systems start the year when the month value is one.\n *\n * In general, manipulating a date, and even querying a date, is wide open to bugs when the\n * calendar system is unknown at development time. This is why it is essential that code using\n * this interface is subjected to additional code reviews. It is also why an architectural\n * decision to avoid this interface type is usually the correct one.\n *\n * #### Using LocalDate instead\n *\n * The primary alternative to using this interface throughout your application is as follows.\n *\n * * Declare all method signatures referring to dates in terms of {@link LocalDate}.\n * * Either store the chronology (calendar system) in the user profile or lookup the chronology\n *   from the user locale.\n * * Convert the ISO {@link LocalDate} to and from the user's preferred calendar system during\n *   printing and parsing.\n *\n * This approach treats the problem of globalized calendar systems as a localization issue\n * and confines it to the UI layer. This approach is in keeping with other localization\n * issues in the java platform.\n *\n * As discussed above, performing calculations on a date where the rules of the calendar system\n * are pluggable requires skill and is not recommended.\n * Fortunately, the need to perform calculations on a date in an arbitrary calendar system\n * is extremely rare. For example, it is highly unlikely that the business rules of a library\n * book rental scheme will allow rentals to be for one month, where meaning of the month\n * is dependent on the user's preferred calendar system.\n *\n * A key use case for calculations on a date in an arbitrary calendar system is producing\n * a month-by-month calendar for display and user interaction. Again, this is a UI issue,\n * and use of this interface solely within a few methods of the UI layer may be justified.\n *\n * In any other part of the system, where a date must be manipulated in a calendar system\n * other than ISO, the use case will generally specify the calendar system to use.\n * For example, an application may need to calculate the next Islamic or Hebrew holiday\n * which may require manipulating the date.\n * This kind of use case can be handled as follows:\n *\n * * start from the ISO {@link LocalDate} being passed to the method\n * * convert the date to the alternate calendar system, which for this use case is known\n *   rather than arbitrary\n * * perform the calculation\n * * convert back to {@link LocalDate}\n *\n * Developers writing low-level frameworks or libraries should also avoid this interface.\n * Instead, one of the two general purpose access interfaces should be used.\n * Use {@link TemporalAccessor} if read-only access is required, or use {@link Temporal}\n * if read-write access is required.\n *\n * ### Specification for implementors\n *\n * This interface must be implemented with care to ensure other classes operate correctly.\n * All implementations that can be instantiated must be final, immutable and thread-safe.\n * Subclasses should be Serializable wherever possible.\n *\n * Additional calendar systems may be added to the system.\n * See {@link Chronology} for more details.\n *\n * In JDK 8, this is an interface with default methods.\n * Since there are no default methods in JDK 7, an abstract class is used.\n ",
            "range": [
              606,
              10217
            ],
            "loc": {
              "start": {
                "line": 17,
                "column": 0
              },
              "end": {
                "line": 182,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": []
      },
      "specifiers": [],
      "source": null,
      "range": [
        10218,
        11958
      ],
      "loc": {
        "start": {
          "line": 183,
          "column": 0
        },
        "end": {
          "line": 230,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * A date without time-of-day or time-zone in an arbitrary chronology, intended\n * for advanced globalization use cases.\n *\n * **Most applications should declare method signatures, fields and variables\n * as {@link LocalDate}, not this interface.**\n *\n * A {@link ChronoLocalDate} is the abstract representation of a date where the\n * {@link Chronology}, or calendar system, is pluggable.\n * The date is defined in terms of fields expressed by {@link TemporalField},\n * where most common implementations are defined in {@link ChronoField}.\n * The chronology defines how the calendar system operates and the meaning of\n * the standard fields.\n *\n * #### When to use this interface\n *\n * The design of the API encourages the use of {@link LocalDate} rather than this\n * interface, even in the case where the application needs to deal with multiple\n * calendar systems. The rationale for this is explored in the following documentation.\n *\n * The primary use case where this interface should be used is where the generic\n * type parameter `C` is fully defined as a specific chronology.\n * In that case, the assumptions of that chronology are known at development\n * time and specified in the code.\n *\n * When the chronology is defined in the generic type parameter as ? or otherwise\n * unknown at development time, the rest of the discussion below applies.\n *\n * To emphasize the point, declaring a method signature, field or variable as this\n * interface type can initially seem like the sensible way to globalize an application,\n * however it is usually the wrong approach.\n * As such, it should be considered an application-wide architectural decision to choose\n * to use this interface as opposed to {@link LocalDate}.\n *\n * #### Architectural issues to consider\n *\n * These are some of the points that must be considered before using this interface\n * throughout an application.\n *\n * 1) Applications using this interface, as opposed to using just {@link LocalDate},\n * face a significantly higher probability of bugs. This is because the calendar system\n * in use is not known at development time. A key cause of bugs is where the developer\n * applies assumptions from their day-to-day knowledge of the ISO calendar system\n * to code that is intended to deal with any arbitrary calendar system.\n * The section below outlines how those assumptions can cause problems\n * The primary mechanism for reducing this increased risk of bugs is a strong code review process.\n * This should also be considered a extra cost in maintenance for the lifetime of the code.\n *\n * 2) This interface does not enforce immutability of implementations.\n * While the implementation notes indicate that all implementations must be immutable\n * there is nothing in the code or type system to enforce this. Any method declared\n * to accept a {@link ChronoLocalDate} could therefore be passed a poorly or\n * maliciously written mutable implementation.\n *\n * 3) Applications using this interface  must consider the impact of eras.\n * {@link LocalDate} shields users from the concept of eras, by ensuring that `getYear()`\n * returns the proleptic year. That decision ensures that developers can think of\n * {@link LocalDate} instances as consisting of three fields - year, month-of-year and day-of-month.\n * By contrast, users of this interface must think of dates as consisting of four fields -\n * era, year-of-era, month-of-year and day-of-month. The extra era field is frequently\n * forgotten, yet it is of vital importance to dates in an arbitrary calendar system.\n * For example, in the Japanese calendar system, the era represents the reign of an Emperor.\n * Whenever one reign ends and another starts, the year-of-era is reset to one.\n *\n * 4) The only agreed international standard for passing a date between two systems\n * is the ISO-8601 standard which requires the ISO calendar system. Using this interface\n * throughout the application will inevitably lead to the requirement to pass the date\n * across a network or component boundary, requiring an application specific protocol or format.\n *\n * 5) Long term persistence, such as a database, will almost always only accept dates in the\n * ISO-8601 calendar system (or the related Julian-Gregorian). Passing around dates in other\n * calendar systems increases the complications of interacting with persistence.\n *\n * 6) Most of the time, passing a {@link ChronoLocalDate} throughout an application\n * is unnecessary, as discussed in the last section below.\n *\n * #### False assumptions causing bugs in multi-calendar system code\n *\n * As indicated above, there are many issues to consider when try to use and manipulate a\n * date in an arbitrary calendar system. These are some of the key issues.\n *\n * Code that queries the day-of-month and assumes that the value will never be more than\n * 31 is invalid. Some calendar systems have more than 31 days in some months.\n *\n * Code that adds 12 months to a date and assumes that a year has been added is invalid.\n * Some calendar systems have a different number of months, such as 13 in the Coptic or Ethiopic.\n *\n * Code that adds one month to a date and assumes that the month-of-year value will increase\n * by one or wrap to the next year is invalid. Some calendar systems have a variable number\n * of months in a year, such as the Hebrew.\n *\n * Code that adds one month, then adds a second one month and assumes that the day-of-month\n * will remain close to its original value is invalid. Some calendar systems have a large difference\n * between the length of the longest month and the length of the shortest month.\n * For example, the Coptic or Ethiopic have 12 months of 30 days and 1 month of 5 days.\n *\n * Code that adds seven days and assumes that a week has been added is invalid.\n * Some calendar systems have weeks of other than seven days, such as the French Revolutionary.\n *\n * Code that assumes that because the year of `date1` is greater than the year of `date2`\n * then `date1` is after `date2` is invalid. This is invalid for all calendar systems\n * when referring to the year-of-era, and especially untrue of the Japanese calendar system\n * where the year-of-era restarts with the reign of every new Emperor.\n *\n * Code that treats month-of-year one and day-of-month one as the start of the year is invalid.\n * Not all calendar systems start the year when the month value is one.\n *\n * In general, manipulating a date, and even querying a date, is wide open to bugs when the\n * calendar system is unknown at development time. This is why it is essential that code using\n * this interface is subjected to additional code reviews. It is also why an architectural\n * decision to avoid this interface type is usually the correct one.\n *\n * #### Using LocalDate instead\n *\n * The primary alternative to using this interface throughout your application is as follows.\n *\n * * Declare all method signatures referring to dates in terms of {@link LocalDate}.\n * * Either store the chronology (calendar system) in the user profile or lookup the chronology\n *   from the user locale.\n * * Convert the ISO {@link LocalDate} to and from the user's preferred calendar system during\n *   printing and parsing.\n *\n * This approach treats the problem of globalized calendar systems as a localization issue\n * and confines it to the UI layer. This approach is in keeping with other localization\n * issues in the java platform.\n *\n * As discussed above, performing calculations on a date where the rules of the calendar system\n * are pluggable requires skill and is not recommended.\n * Fortunately, the need to perform calculations on a date in an arbitrary calendar system\n * is extremely rare. For example, it is highly unlikely that the business rules of a library\n * book rental scheme will allow rentals to be for one month, where meaning of the month\n * is dependent on the user's preferred calendar system.\n *\n * A key use case for calculations on a date in an arbitrary calendar system is producing\n * a month-by-month calendar for display and user interaction. Again, this is a UI issue,\n * and use of this interface solely within a few methods of the UI layer may be justified.\n *\n * In any other part of the system, where a date must be manipulated in a calendar system\n * other than ISO, the use case will generally specify the calendar system to use.\n * For example, an application may need to calculate the next Islamic or Hebrew holiday\n * which may require manipulating the date.\n * This kind of use case can be handled as follows:\n *\n * * start from the ISO {@link LocalDate} being passed to the method\n * * convert the date to the alternate calendar system, which for this use case is known\n *   rather than arbitrary\n * * perform the calculation\n * * convert back to {@link LocalDate}\n *\n * Developers writing low-level frameworks or libraries should also avoid this interface.\n * Instead, one of the two general purpose access interfaces should be used.\n * Use {@link TemporalAccessor} if read-only access is required, or use {@link Temporal}\n * if read-write access is required.\n *\n * ### Specification for implementors\n *\n * This interface must be implemented with care to ensure other classes operate correctly.\n * All implementations that can be instantiated must be final, immutable and thread-safe.\n * Subclasses should be Serializable wherever possible.\n *\n * Additional calendar systems may be added to the system.\n * See {@link Chronology} for more details.\n *\n * In JDK 8, this is an interface with default methods.\n * Since there are no default methods in JDK 7, an abstract class is used.\n ",
          "range": [
            606,
            10217
          ],
          "loc": {
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 182,
              "column": 3
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    229,
    11958
  ],
  "loc": {
    "start": {
      "line": 7,
      "column": 0
    },
    "end": {
      "line": 230,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n ",
      "range": [
        0,
        227
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * A date without time-of-day or time-zone in an arbitrary chronology, intended\n * for advanced globalization use cases.\n *\n * **Most applications should declare method signatures, fields and variables\n * as {@link LocalDate}, not this interface.**\n *\n * A {@link ChronoLocalDate} is the abstract representation of a date where the\n * {@link Chronology}, or calendar system, is pluggable.\n * The date is defined in terms of fields expressed by {@link TemporalField},\n * where most common implementations are defined in {@link ChronoField}.\n * The chronology defines how the calendar system operates and the meaning of\n * the standard fields.\n *\n * #### When to use this interface\n *\n * The design of the API encourages the use of {@link LocalDate} rather than this\n * interface, even in the case where the application needs to deal with multiple\n * calendar systems. The rationale for this is explored in the following documentation.\n *\n * The primary use case where this interface should be used is where the generic\n * type parameter `C` is fully defined as a specific chronology.\n * In that case, the assumptions of that chronology are known at development\n * time and specified in the code.\n *\n * When the chronology is defined in the generic type parameter as ? or otherwise\n * unknown at development time, the rest of the discussion below applies.\n *\n * To emphasize the point, declaring a method signature, field or variable as this\n * interface type can initially seem like the sensible way to globalize an application,\n * however it is usually the wrong approach.\n * As such, it should be considered an application-wide architectural decision to choose\n * to use this interface as opposed to {@link LocalDate}.\n *\n * #### Architectural issues to consider\n *\n * These are some of the points that must be considered before using this interface\n * throughout an application.\n *\n * 1) Applications using this interface, as opposed to using just {@link LocalDate},\n * face a significantly higher probability of bugs. This is because the calendar system\n * in use is not known at development time. A key cause of bugs is where the developer\n * applies assumptions from their day-to-day knowledge of the ISO calendar system\n * to code that is intended to deal with any arbitrary calendar system.\n * The section below outlines how those assumptions can cause problems\n * The primary mechanism for reducing this increased risk of bugs is a strong code review process.\n * This should also be considered a extra cost in maintenance for the lifetime of the code.\n *\n * 2) This interface does not enforce immutability of implementations.\n * While the implementation notes indicate that all implementations must be immutable\n * there is nothing in the code or type system to enforce this. Any method declared\n * to accept a {@link ChronoLocalDate} could therefore be passed a poorly or\n * maliciously written mutable implementation.\n *\n * 3) Applications using this interface  must consider the impact of eras.\n * {@link LocalDate} shields users from the concept of eras, by ensuring that `getYear()`\n * returns the proleptic year. That decision ensures that developers can think of\n * {@link LocalDate} instances as consisting of three fields - year, month-of-year and day-of-month.\n * By contrast, users of this interface must think of dates as consisting of four fields -\n * era, year-of-era, month-of-year and day-of-month. The extra era field is frequently\n * forgotten, yet it is of vital importance to dates in an arbitrary calendar system.\n * For example, in the Japanese calendar system, the era represents the reign of an Emperor.\n * Whenever one reign ends and another starts, the year-of-era is reset to one.\n *\n * 4) The only agreed international standard for passing a date between two systems\n * is the ISO-8601 standard which requires the ISO calendar system. Using this interface\n * throughout the application will inevitably lead to the requirement to pass the date\n * across a network or component boundary, requiring an application specific protocol or format.\n *\n * 5) Long term persistence, such as a database, will almost always only accept dates in the\n * ISO-8601 calendar system (or the related Julian-Gregorian). Passing around dates in other\n * calendar systems increases the complications of interacting with persistence.\n *\n * 6) Most of the time, passing a {@link ChronoLocalDate} throughout an application\n * is unnecessary, as discussed in the last section below.\n *\n * #### False assumptions causing bugs in multi-calendar system code\n *\n * As indicated above, there are many issues to consider when try to use and manipulate a\n * date in an arbitrary calendar system. These are some of the key issues.\n *\n * Code that queries the day-of-month and assumes that the value will never be more than\n * 31 is invalid. Some calendar systems have more than 31 days in some months.\n *\n * Code that adds 12 months to a date and assumes that a year has been added is invalid.\n * Some calendar systems have a different number of months, such as 13 in the Coptic or Ethiopic.\n *\n * Code that adds one month to a date and assumes that the month-of-year value will increase\n * by one or wrap to the next year is invalid. Some calendar systems have a variable number\n * of months in a year, such as the Hebrew.\n *\n * Code that adds one month, then adds a second one month and assumes that the day-of-month\n * will remain close to its original value is invalid. Some calendar systems have a large difference\n * between the length of the longest month and the length of the shortest month.\n * For example, the Coptic or Ethiopic have 12 months of 30 days and 1 month of 5 days.\n *\n * Code that adds seven days and assumes that a week has been added is invalid.\n * Some calendar systems have weeks of other than seven days, such as the French Revolutionary.\n *\n * Code that assumes that because the year of `date1` is greater than the year of `date2`\n * then `date1` is after `date2` is invalid. This is invalid for all calendar systems\n * when referring to the year-of-era, and especially untrue of the Japanese calendar system\n * where the year-of-era restarts with the reign of every new Emperor.\n *\n * Code that treats month-of-year one and day-of-month one as the start of the year is invalid.\n * Not all calendar systems start the year when the month value is one.\n *\n * In general, manipulating a date, and even querying a date, is wide open to bugs when the\n * calendar system is unknown at development time. This is why it is essential that code using\n * this interface is subjected to additional code reviews. It is also why an architectural\n * decision to avoid this interface type is usually the correct one.\n *\n * #### Using LocalDate instead\n *\n * The primary alternative to using this interface throughout your application is as follows.\n *\n * * Declare all method signatures referring to dates in terms of {@link LocalDate}.\n * * Either store the chronology (calendar system) in the user profile or lookup the chronology\n *   from the user locale.\n * * Convert the ISO {@link LocalDate} to and from the user's preferred calendar system during\n *   printing and parsing.\n *\n * This approach treats the problem of globalized calendar systems as a localization issue\n * and confines it to the UI layer. This approach is in keeping with other localization\n * issues in the java platform.\n *\n * As discussed above, performing calculations on a date where the rules of the calendar system\n * are pluggable requires skill and is not recommended.\n * Fortunately, the need to perform calculations on a date in an arbitrary calendar system\n * is extremely rare. For example, it is highly unlikely that the business rules of a library\n * book rental scheme will allow rentals to be for one month, where meaning of the month\n * is dependent on the user's preferred calendar system.\n *\n * A key use case for calculations on a date in an arbitrary calendar system is producing\n * a month-by-month calendar for display and user interaction. Again, this is a UI issue,\n * and use of this interface solely within a few methods of the UI layer may be justified.\n *\n * In any other part of the system, where a date must be manipulated in a calendar system\n * other than ISO, the use case will generally specify the calendar system to use.\n * For example, an application may need to calculate the next Islamic or Hebrew holiday\n * which may require manipulating the date.\n * This kind of use case can be handled as follows:\n *\n * * start from the ISO {@link LocalDate} being passed to the method\n * * convert the date to the alternate calendar system, which for this use case is known\n *   rather than arbitrary\n * * perform the calculation\n * * convert back to {@link LocalDate}\n *\n * Developers writing low-level frameworks or libraries should also avoid this interface.\n * Instead, one of the two general purpose access interfaces should be used.\n * Use {@link TemporalAccessor} if read-only access is required, or use {@link Temporal}\n * if read-write access is required.\n *\n * ### Specification for implementors\n *\n * This interface must be implemented with care to ensure other classes operate correctly.\n * All implementations that can be instantiated must be final, immutable and thread-safe.\n * Subclasses should be Serializable wherever possible.\n *\n * Additional calendar systems may be added to the system.\n * See {@link Chronology} for more details.\n *\n * In JDK 8, this is an interface with default methods.\n * Since there are no default methods in JDK 7, an abstract class is used.\n ",
      "range": [
        606,
        10217
      ],
      "loc": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 182,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Formats this date using the specified formatter.\n     *\n     * This date will be passed to the formatter to produce a string.\n     *\n     * The default implementation must behave as follows:\n     * <pre>\n     *  return formatter.format(this);\n     * </pre>\n     *\n     * @param {DateTimeFormatter} formatter  the formatter to use, not null\n     * @return {String} the formatted date string, not null\n     * @throws DateTimeException if an error occurs during printing\n     ",
      "range": [
        11285,
        11771
      ],
      "loc": {
        "start": {
          "line": 211,
          "column": 4
        },
        "end": {
          "line": 224,
          "column": 7
        }
      }
    }
  ]
}