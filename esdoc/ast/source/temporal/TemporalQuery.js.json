{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "abstractMethodFail",
            "range": [
              237,
              255
            ],
            "loc": {
              "start": {
                "line": 7,
                "column": 8
              },
              "end": {
                "line": 7,
                "column": 26
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "abstractMethodFail",
            "range": [
              237,
              255
            ],
            "loc": {
              "start": {
                "line": 7,
                "column": 8
              },
              "end": {
                "line": 7,
                "column": 26
              }
            }
          },
          "range": [
            237,
            255
          ],
          "loc": {
            "start": {
              "line": 7,
              "column": 8
            },
            "end": {
              "line": 7,
              "column": 26
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../assert",
        "raw": "'../assert'",
        "range": [
          262,
          273
        ],
        "loc": {
          "start": {
            "line": 7,
            "column": 33
          },
          "end": {
            "line": 7,
            "column": 44
          }
        }
      },
      "range": [
        229,
        274
      ],
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 45
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n ",
          "range": [
            0,
            227
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "Enum",
            "range": [
              283,
              287
            ],
            "loc": {
              "start": {
                "line": 8,
                "column": 8
              },
              "end": {
                "line": 8,
                "column": 12
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "Enum",
            "range": [
              283,
              287
            ],
            "loc": {
              "start": {
                "line": 8,
                "column": 8
              },
              "end": {
                "line": 8,
                "column": 12
              }
            }
          },
          "range": [
            283,
            287
          ],
          "loc": {
            "start": {
              "line": 8,
              "column": 8
            },
            "end": {
              "line": 8,
              "column": 12
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../Enum",
        "raw": "'../Enum'",
        "range": [
          294,
          303
        ],
        "loc": {
          "start": {
            "line": 8,
            "column": 19
          },
          "end": {
            "line": 8,
            "column": 28
          }
        }
      },
      "range": [
        275,
        304
      ],
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 8,
          "column": 29
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Strategy for querying a temporal object.\n *\n * Queries are a key tool for extracting information from temporal objects.\n * They exist to externalize the process of querying, permitting different\n * approaches, as per the strategy design pattern.\n * Examples might be a query that checks if the date is the day before February 29th\n * in a leap year, or calculates the number of days to your next birthday.\n *\n * The {@link TemporalField} interface provides another mechanism for querying\n * temporal objects. That interface is limited to returning a `long`.\n * By contrast, queries can return any type.\n *\n * There are two equivalent ways of using a {@link TemporalQuery}.\n * The first is to invoke the method on this interface directly.\n * The second is to use {@link TemporalAccessor#query}:\n * <pre>\n *   // these two lines are equivalent, but the second approach is recommended\n *   temporal = thisQuery.queryFrom(temporal);\n *   temporal = temporal.query(thisQuery);\n * </pre>\n * It is recommended to use the second approach, {@link query},\n * as it is a lot clearer to read in code.\n *\n * The most common implementations are method references, such as\n * {@link LocalDate::from} and {@link ZoneId::from}.\n * Further implementations are on {@link TemporalQueries}.\n * Queries may also be defined by applications.\n *\n * ### Specification for implementors\n *\n * This interface places no restrictions on the mutability of implementations,\n * however immutability is strongly recommended.\n *\n * @interface\n ",
          "range": [
            307,
            1824
          ],
          "loc": {
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 46,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "ClassDeclaration",
        "id": {
          "type": "Identifier",
          "name": "TemporalQuery",
          "range": [
            1838,
            1851
          ],
          "loc": {
            "start": {
              "line": 47,
              "column": 13
            },
            "end": {
              "line": 47,
              "column": 26
            }
          }
        },
        "superClass": {
          "type": "Identifier",
          "name": "Enum",
          "range": [
            1861,
            1865
          ],
          "loc": {
            "start": {
              "line": 47,
              "column": 36
            },
            "end": {
              "line": 47,
              "column": 40
            }
          }
        },
        "body": {
          "type": "ClassBody",
          "body": [
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "queryFrom",
                "range": [
                  3829,
                  3838
                ],
                "loc": {
                  "start": {
                    "line": 88,
                    "column": 4
                  },
                  "end": {
                    "line": 88,
                    "column": 13
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "temporal",
                    "range": [
                      3839,
                      3847
                    ],
                    "loc": {
                      "start": {
                        "line": 88,
                        "column": 14
                      },
                      "end": {
                        "line": 88,
                        "column": 22
                      }
                    }
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "abstractMethodFail",
                          "range": [
                            3858,
                            3876
                          ],
                          "loc": {
                            "start": {
                              "line": 89,
                              "column": 8
                            },
                            "end": {
                              "line": 89,
                              "column": 26
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "queryFrom",
                            "raw": "'queryFrom'",
                            "range": [
                              3877,
                              3888
                            ],
                            "loc": {
                              "start": {
                                "line": 89,
                                "column": 27
                              },
                              "end": {
                                "line": 89,
                                "column": 38
                              }
                            }
                          }
                        ],
                        "range": [
                          3858,
                          3889
                        ],
                        "loc": {
                          "start": {
                            "line": 89,
                            "column": 8
                          },
                          "end": {
                            "line": 89,
                            "column": 39
                          }
                        }
                      },
                      "range": [
                        3858,
                        3890
                      ],
                      "loc": {
                        "start": {
                          "line": 89,
                          "column": 8
                        },
                        "end": {
                          "line": 89,
                          "column": 40
                        }
                      }
                    }
                  ],
                  "range": [
                    3848,
                    3896
                  ],
                  "loc": {
                    "start": {
                      "line": 88,
                      "column": 23
                    },
                    "end": {
                      "line": 90,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  3838,
                  3896
                ],
                "loc": {
                  "start": {
                    "line": 88,
                    "column": 13
                  },
                  "end": {
                    "line": 90,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                3829,
                3896
              ],
              "loc": {
                "start": {
                  "line": 88,
                  "column": 4
                },
                "end": {
                  "line": 90,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Queries the specified temporal object.\n     *\n     * This queries the specified temporal object to return an object using the logic\n     * encapsulated in the implementing class.\n     * Examples might be a query that checks if the date is the day before February 29th\n     * in a leap year, or calculates the number of days to your next birthday.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#query}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisQuery.queryFrom(temporal);\n     *   temporal = temporal.query(thisQuery);\n     * </pre>\n     * It is recommended to use the second approach, {@link query},\n     * as it is a lot clearer to read in code.\n     *\n     * ### Specification for implementors\n     *\n     * The implementation must take the input object and query it.\n     * The implementation defines the logic of the query and is responsible for\n     * documenting that logic.\n     * It may use any method on {@link TemporalAccessor} to determine the result.\n     * The input object must not be altered.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {TemporalAccessor} temporal  the temporal object to query, not null\n     * @return the queried value, may return null to indicate not found\n     * @throws DateTimeException if unable to query\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
                  "range": [
                    1872,
                    3777
                  ],
                  "loc": {
                    "start": {
                      "line": 48,
                      "column": 4
                    },
                    "end": {
                      "line": 86,
                      "column": 7
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " eslint-disable-next-line no-unused-vars",
                  "range": [
                    3782,
                    3824
                  ],
                  "loc": {
                    "start": {
                      "line": 87,
                      "column": 4
                    },
                    "end": {
                      "line": 87,
                      "column": 46
                    }
                  }
                }
              ],
              "static": false
            }
          ],
          "range": [
            1866,
            3899
          ],
          "loc": {
            "start": {
              "line": 47,
              "column": 41
            },
            "end": {
              "line": 92,
              "column": 1
            }
          }
        },
        "range": [
          1832,
          3899
        ],
        "loc": {
          "start": {
            "line": 47,
            "column": 7
          },
          "end": {
            "line": 92,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Strategy for querying a temporal object.\n *\n * Queries are a key tool for extracting information from temporal objects.\n * They exist to externalize the process of querying, permitting different\n * approaches, as per the strategy design pattern.\n * Examples might be a query that checks if the date is the day before February 29th\n * in a leap year, or calculates the number of days to your next birthday.\n *\n * The {@link TemporalField} interface provides another mechanism for querying\n * temporal objects. That interface is limited to returning a `long`.\n * By contrast, queries can return any type.\n *\n * There are two equivalent ways of using a {@link TemporalQuery}.\n * The first is to invoke the method on this interface directly.\n * The second is to use {@link TemporalAccessor#query}:\n * <pre>\n *   // these two lines are equivalent, but the second approach is recommended\n *   temporal = thisQuery.queryFrom(temporal);\n *   temporal = temporal.query(thisQuery);\n * </pre>\n * It is recommended to use the second approach, {@link query},\n * as it is a lot clearer to read in code.\n *\n * The most common implementations are method references, such as\n * {@link LocalDate::from} and {@link ZoneId::from}.\n * Further implementations are on {@link TemporalQueries}.\n * Queries may also be defined by applications.\n *\n * ### Specification for implementors\n *\n * This interface places no restrictions on the mutability of implementations,\n * however immutability is strongly recommended.\n *\n * @interface\n ",
            "range": [
              307,
              1824
            ],
            "loc": {
              "start": {
                "line": 11,
                "column": 0
              },
              "end": {
                "line": 46,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Factory to create something similar to the JSR-310 {TemporalQuery} interface, takes a function and returns a new TemporalQuery object that presents that function\n * as the queryFrom() function.\n * @param name for the underlying Enum\n * @param queryFromFunction\n ",
            "range": [
              3901,
              4172
            ],
            "loc": {
              "start": {
                "line": 94,
                "column": 0
              },
              "end": {
                "line": 99,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        1825,
        3899
      ],
      "loc": {
        "start": {
          "line": 47,
          "column": 0
        },
        "end": {
          "line": 92,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Strategy for querying a temporal object.\n *\n * Queries are a key tool for extracting information from temporal objects.\n * They exist to externalize the process of querying, permitting different\n * approaches, as per the strategy design pattern.\n * Examples might be a query that checks if the date is the day before February 29th\n * in a leap year, or calculates the number of days to your next birthday.\n *\n * The {@link TemporalField} interface provides another mechanism for querying\n * temporal objects. That interface is limited to returning a `long`.\n * By contrast, queries can return any type.\n *\n * There are two equivalent ways of using a {@link TemporalQuery}.\n * The first is to invoke the method on this interface directly.\n * The second is to use {@link TemporalAccessor#query}:\n * <pre>\n *   // these two lines are equivalent, but the second approach is recommended\n *   temporal = thisQuery.queryFrom(temporal);\n *   temporal = temporal.query(thisQuery);\n * </pre>\n * It is recommended to use the second approach, {@link query},\n * as it is a lot clearer to read in code.\n *\n * The most common implementations are method references, such as\n * {@link LocalDate::from} and {@link ZoneId::from}.\n * Further implementations are on {@link TemporalQueries}.\n * Queries may also be defined by applications.\n *\n * ### Specification for implementors\n *\n * This interface places no restrictions on the mutability of implementations,\n * however immutability is strongly recommended.\n *\n * @interface\n ",
          "range": [
            307,
            1824
          ],
          "loc": {
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 46,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Factory to create something similar to the JSR-310 {TemporalQuery} interface, takes a function and returns a new TemporalQuery object that presents that function\n * as the queryFrom() function.\n * @param name for the underlying Enum\n * @param queryFromFunction\n ",
          "range": [
            3901,
            4172
          ],
          "loc": {
            "start": {
              "line": 94,
              "column": 0
            },
            "end": {
              "line": 99,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "createTemporalQuery",
          "range": [
            4189,
            4208
          ],
          "loc": {
            "start": {
              "line": 100,
              "column": 16
            },
            "end": {
              "line": 100,
              "column": 35
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              4209,
              4213
            ],
            "loc": {
              "start": {
                "line": 100,
                "column": 36
              },
              "end": {
                "line": 100,
                "column": 40
              }
            }
          },
          {
            "type": "Identifier",
            "name": "queryFromFunction",
            "range": [
              4215,
              4232
            ],
            "loc": {
              "start": {
                "line": 100,
                "column": 42
              },
              "end": {
                "line": 100,
                "column": 59
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ClassDeclaration",
              "id": {
                "type": "Identifier",
                "name": "ExtendedTemporalQuery",
                "range": [
                  4246,
                  4267
                ],
                "loc": {
                  "start": {
                    "line": 101,
                    "column": 10
                  },
                  "end": {
                    "line": 101,
                    "column": 31
                  }
                }
              },
              "superClass": {
                "type": "Identifier",
                "name": "TemporalQuery",
                "range": [
                  4276,
                  4289
                ],
                "loc": {
                  "start": {
                    "line": 101,
                    "column": 40
                  },
                  "end": {
                    "line": 101,
                    "column": 53
                  }
                }
              },
              "body": {
                "type": "ClassBody",
                "body": [],
                "range": [
                  4290,
                  4298
                ],
                "loc": {
                  "start": {
                    "line": 101,
                    "column": 54
                  },
                  "end": {
                    "line": 103,
                    "column": 5
                  }
                }
              },
              "range": [
                4240,
                4298
              ],
              "loc": {
                "start": {
                  "line": 101,
                  "column": 4
                },
                "end": {
                  "line": 103,
                  "column": 5
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "ExtendedTemporalQuery",
                      "range": [
                        4304,
                        4325
                      ],
                      "loc": {
                        "start": {
                          "line": 105,
                          "column": 4
                        },
                        "end": {
                          "line": 105,
                          "column": 25
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "prototype",
                      "range": [
                        4326,
                        4335
                      ],
                      "loc": {
                        "start": {
                          "line": 105,
                          "column": 26
                        },
                        "end": {
                          "line": 105,
                          "column": 35
                        }
                      }
                    },
                    "range": [
                      4304,
                      4335
                    ],
                    "loc": {
                      "start": {
                        "line": 105,
                        "column": 4
                      },
                      "end": {
                        "line": 105,
                        "column": 35
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "queryFrom",
                    "range": [
                      4336,
                      4345
                    ],
                    "loc": {
                      "start": {
                        "line": 105,
                        "column": 36
                      },
                      "end": {
                        "line": 105,
                        "column": 45
                      }
                    }
                  },
                  "range": [
                    4304,
                    4345
                  ],
                  "loc": {
                    "start": {
                      "line": 105,
                      "column": 4
                    },
                    "end": {
                      "line": 105,
                      "column": 45
                    }
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "queryFromFunction",
                  "range": [
                    4348,
                    4365
                  ],
                  "loc": {
                    "start": {
                      "line": 105,
                      "column": 48
                    },
                    "end": {
                      "line": 105,
                      "column": 65
                    }
                  }
                },
                "range": [
                  4304,
                  4365
                ],
                "loc": {
                  "start": {
                    "line": 105,
                    "column": 4
                  },
                  "end": {
                    "line": 105,
                    "column": 65
                  }
                }
              },
              "range": [
                4304,
                4366
              ],
              "loc": {
                "start": {
                  "line": 105,
                  "column": 4
                },
                "end": {
                  "line": 105,
                  "column": 66
                }
              }
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "NewExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "ExtendedTemporalQuery",
                  "range": [
                    4382,
                    4403
                  ],
                  "loc": {
                    "start": {
                      "line": 106,
                      "column": 15
                    },
                    "end": {
                      "line": 106,
                      "column": 36
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      4404,
                      4408
                    ],
                    "loc": {
                      "start": {
                        "line": 106,
                        "column": 37
                      },
                      "end": {
                        "line": 106,
                        "column": 41
                      }
                    }
                  }
                ],
                "range": [
                  4378,
                  4409
                ],
                "loc": {
                  "start": {
                    "line": 106,
                    "column": 11
                  },
                  "end": {
                    "line": 106,
                    "column": 42
                  }
                }
              },
              "range": [
                4371,
                4410
              ],
              "loc": {
                "start": {
                  "line": 106,
                  "column": 4
                },
                "end": {
                  "line": 106,
                  "column": 43
                }
              }
            }
          ],
          "range": [
            4234,
            4412
          ],
          "loc": {
            "start": {
              "line": 100,
              "column": 61
            },
            "end": {
              "line": 107,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          4180,
          4412
        ],
        "loc": {
          "start": {
            "line": 100,
            "column": 7
          },
          "end": {
            "line": 107,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Factory to create something similar to the JSR-310 {TemporalQuery} interface, takes a function and returns a new TemporalQuery object that presents that function\n * as the queryFrom() function.\n * @param name for the underlying Enum\n * @param queryFromFunction\n ",
            "range": [
              3901,
              4172
            ],
            "loc": {
              "start": {
                "line": 94,
                "column": 0
              },
              "end": {
                "line": 99,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": []
      },
      "specifiers": [],
      "source": null,
      "range": [
        4173,
        4412
      ],
      "loc": {
        "start": {
          "line": 100,
          "column": 0
        },
        "end": {
          "line": 107,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Factory to create something similar to the JSR-310 {TemporalQuery} interface, takes a function and returns a new TemporalQuery object that presents that function\n * as the queryFrom() function.\n * @param name for the underlying Enum\n * @param queryFromFunction\n ",
          "range": [
            3901,
            4172
          ],
          "loc": {
            "start": {
              "line": 94,
              "column": 0
            },
            "end": {
              "line": 99,
              "column": 3
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    229,
    4412
  ],
  "loc": {
    "start": {
      "line": 7,
      "column": 0
    },
    "end": {
      "line": 107,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n ",
      "range": [
        0,
        227
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Strategy for querying a temporal object.\n *\n * Queries are a key tool for extracting information from temporal objects.\n * They exist to externalize the process of querying, permitting different\n * approaches, as per the strategy design pattern.\n * Examples might be a query that checks if the date is the day before February 29th\n * in a leap year, or calculates the number of days to your next birthday.\n *\n * The {@link TemporalField} interface provides another mechanism for querying\n * temporal objects. That interface is limited to returning a `long`.\n * By contrast, queries can return any type.\n *\n * There are two equivalent ways of using a {@link TemporalQuery}.\n * The first is to invoke the method on this interface directly.\n * The second is to use {@link TemporalAccessor#query}:\n * <pre>\n *   // these two lines are equivalent, but the second approach is recommended\n *   temporal = thisQuery.queryFrom(temporal);\n *   temporal = temporal.query(thisQuery);\n * </pre>\n * It is recommended to use the second approach, {@link query},\n * as it is a lot clearer to read in code.\n *\n * The most common implementations are method references, such as\n * {@link LocalDate::from} and {@link ZoneId::from}.\n * Further implementations are on {@link TemporalQueries}.\n * Queries may also be defined by applications.\n *\n * ### Specification for implementors\n *\n * This interface places no restrictions on the mutability of implementations,\n * however immutability is strongly recommended.\n *\n * @interface\n ",
      "range": [
        307,
        1824
      ],
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 46,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Queries the specified temporal object.\n     *\n     * This queries the specified temporal object to return an object using the logic\n     * encapsulated in the implementing class.\n     * Examples might be a query that checks if the date is the day before February 29th\n     * in a leap year, or calculates the number of days to your next birthday.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#query}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisQuery.queryFrom(temporal);\n     *   temporal = temporal.query(thisQuery);\n     * </pre>\n     * It is recommended to use the second approach, {@link query},\n     * as it is a lot clearer to read in code.\n     *\n     * ### Specification for implementors\n     *\n     * The implementation must take the input object and query it.\n     * The implementation defines the logic of the query and is responsible for\n     * documenting that logic.\n     * It may use any method on {@link TemporalAccessor} to determine the result.\n     * The input object must not be altered.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {TemporalAccessor} temporal  the temporal object to query, not null\n     * @return the queried value, may return null to indicate not found\n     * @throws DateTimeException if unable to query\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
      "range": [
        1872,
        3777
      ],
      "loc": {
        "start": {
          "line": 48,
          "column": 4
        },
        "end": {
          "line": 86,
          "column": 7
        }
      }
    },
    {
      "type": "Line",
      "value": " eslint-disable-next-line no-unused-vars",
      "range": [
        3782,
        3824
      ],
      "loc": {
        "start": {
          "line": 87,
          "column": 4
        },
        "end": {
          "line": 87,
          "column": 46
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Factory to create something similar to the JSR-310 {TemporalQuery} interface, takes a function and returns a new TemporalQuery object that presents that function\n * as the queryFrom() function.\n * @param name for the underlying Enum\n * @param queryFromFunction\n ",
      "range": [
        3901,
        4172
      ],
      "loc": {
        "start": {
          "line": 94,
          "column": 0
        },
        "end": {
          "line": 99,
          "column": 3
        }
      }
    }
  ]
}