{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "abstractMethodFail",
            "range": [
              237,
              255
            ],
            "loc": {
              "start": {
                "line": 7,
                "column": 8
              },
              "end": {
                "line": 7,
                "column": 26
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "abstractMethodFail",
            "range": [
              237,
              255
            ],
            "loc": {
              "start": {
                "line": 7,
                "column": 8
              },
              "end": {
                "line": 7,
                "column": 26
              }
            }
          },
          "range": [
            237,
            255
          ],
          "loc": {
            "start": {
              "line": 7,
              "column": 8
            },
            "end": {
              "line": 7,
              "column": 26
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../assert",
        "raw": "'../assert'",
        "range": [
          262,
          273
        ],
        "loc": {
          "start": {
            "line": 7,
            "column": 33
          },
          "end": {
            "line": 7,
            "column": 44
          }
        }
      },
      "range": [
        229,
        274
      ],
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 45
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n ",
          "range": [
            0,
            227
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Framework-level interface defining an amount of time, such as\n * \"6 hours\", \"8 days\" or \"2 years and 3 months\".\n *\n * This is the base interface type for amounts of time.\n * An amount is distinct from a date or time-of-day in that it is not tied\n * to any specific point on the time-line.\n *\n * The amount can be thought of as a {@link Map} of {@link TemporalUnit} to\n * `long`, exposed via {@link getUnits} and {@link get}.\n * A simple case might have a single unit-value pair, such as \"6 hours\".\n * A more complex case may have multiple unit-value pairs, such as\n * \"7 years, 3 months and 5 days\".\n *\n * There are two common implementations.\n * {@link Period} is a date-based implementation, storing years, months and days.\n * {@link Duration} is a time-based implementation, storing seconds and nanoseconds,\n * but providing some access using other duration based units such as minutes,\n * hours and fixed 24-hour days.\n *\n * This interface is a framework-level interface that should not be widely\n * used in application code. Instead, applications should create and pass\n * around instances of concrete types, such as {@link Period} and {@link Duration}.\n *\n * @interface\n ",
          "range": [
            276,
            1462
          ],
          "loc": {
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 34,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "ClassDeclaration",
        "id": {
          "type": "Identifier",
          "name": "TemporalAmount",
          "range": [
            1476,
            1490
          ],
          "loc": {
            "start": {
              "line": 35,
              "column": 13
            },
            "end": {
              "line": 35,
              "column": 27
            }
          }
        },
        "superClass": null,
        "body": {
          "type": "ClassBody",
          "body": [
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "get",
                "range": [
                  2338,
                  2341
                ],
                "loc": {
                  "start": {
                    "line": 53,
                    "column": 4
                  },
                  "end": {
                    "line": 53,
                    "column": 7
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "unit",
                    "range": [
                      2342,
                      2346
                    ],
                    "loc": {
                      "start": {
                        "line": 53,
                        "column": 8
                      },
                      "end": {
                        "line": 53,
                        "column": 12
                      }
                    }
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "abstractMethodFail",
                          "range": [
                            2358,
                            2376
                          ],
                          "loc": {
                            "start": {
                              "line": 54,
                              "column": 8
                            },
                            "end": {
                              "line": 54,
                              "column": 26
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "get",
                            "raw": "'get'",
                            "range": [
                              2377,
                              2382
                            ],
                            "loc": {
                              "start": {
                                "line": 54,
                                "column": 27
                              },
                              "end": {
                                "line": 54,
                                "column": 32
                              }
                            }
                          }
                        ],
                        "range": [
                          2358,
                          2383
                        ],
                        "loc": {
                          "start": {
                            "line": 54,
                            "column": 8
                          },
                          "end": {
                            "line": 54,
                            "column": 33
                          }
                        }
                      },
                      "range": [
                        2358,
                        2384
                      ],
                      "loc": {
                        "start": {
                          "line": 54,
                          "column": 8
                        },
                        "end": {
                          "line": 54,
                          "column": 34
                        }
                      }
                    }
                  ],
                  "range": [
                    2348,
                    2390
                  ],
                  "loc": {
                    "start": {
                      "line": 53,
                      "column": 14
                    },
                    "end": {
                      "line": 55,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  2341,
                  2390
                ],
                "loc": {
                  "start": {
                    "line": 53,
                    "column": 7
                  },
                  "end": {
                    "line": 55,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                2338,
                2390
              ],
              "loc": {
                "start": {
                  "line": 53,
                  "column": 4
                },
                "end": {
                  "line": 55,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Returns the value of the requested unit.\n     * The units returned from {@link getUnits} uniquely define the\n     * value of the {@link TemporalAmount}.  A value must be returned\n     * for each unit listed in {@link getUnits}.\n     *\n     * @implSpec\n     * Implementations may declare support for units not listed by {@link getUnits}.\n     * Typically, the implementation would define additional units\n     * as conversions for the convenience of developers.\n     *\n     * @param {TemporalUnit} unit - the {@link TemporalUnit} for which to return the value\n     * @return {number} the long value of the unit\n     * @throws DateTimeException if a value for the unit cannot be obtained\n     * @throws UnsupportedTemporalTypeException if the {@link unit} is not supported\n     ",
                  "range": [
                    1497,
                    2286
                  ],
                  "loc": {
                    "start": {
                      "line": 36,
                      "column": 4
                    },
                    "end": {
                      "line": 51,
                      "column": 7
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " eslint-disable-next-line no-unused-vars",
                  "range": [
                    2291,
                    2333
                  ],
                  "loc": {
                    "start": {
                      "line": 52,
                      "column": 4
                    },
                    "end": {
                      "line": 52,
                      "column": 46
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Returns the list of units uniquely defining the value of this TemporalAmount.\n     * The list of {@link TemporalUnits} is defined by the implementation class.\n     * The list is a snapshot of the units at the time {@link getUnits}\n     * is called and is not mutable.\n     * The units are ordered from longest duration to the shortest duration\n     * of the unit.\n     *\n     * @implSpec\n     * The list of units completely and uniquely represents the\n     * state of the object without omissions, overlaps or duplication.\n     * The units are in order from longest duration to shortest.\n     *\n     * @return {TemporalUnit[]} the List of {@link TemporalUnits}; not null\n     ",
                  "range": [
                    2400,
                    3089
                  ],
                  "loc": {
                    "start": {
                      "line": 57,
                      "column": 4
                    },
                    "end": {
                      "line": 71,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "units",
                "range": [
                  3094,
                  3099
                ],
                "loc": {
                  "start": {
                    "line": 72,
                    "column": 4
                  },
                  "end": {
                    "line": 72,
                    "column": 9
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "abstractMethodFail",
                          "range": [
                            3112,
                            3130
                          ],
                          "loc": {
                            "start": {
                              "line": 73,
                              "column": 8
                            },
                            "end": {
                              "line": 73,
                              "column": 26
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "units",
                            "raw": "'units'",
                            "range": [
                              3131,
                              3138
                            ],
                            "loc": {
                              "start": {
                                "line": 73,
                                "column": 27
                              },
                              "end": {
                                "line": 73,
                                "column": 34
                              }
                            }
                          }
                        ],
                        "range": [
                          3112,
                          3139
                        ],
                        "loc": {
                          "start": {
                            "line": 73,
                            "column": 8
                          },
                          "end": {
                            "line": 73,
                            "column": 35
                          }
                        }
                      },
                      "range": [
                        3112,
                        3140
                      ],
                      "loc": {
                        "start": {
                          "line": 73,
                          "column": 8
                        },
                        "end": {
                          "line": 73,
                          "column": 36
                        }
                      }
                    }
                  ],
                  "range": [
                    3102,
                    3146
                  ],
                  "loc": {
                    "start": {
                      "line": 72,
                      "column": 12
                    },
                    "end": {
                      "line": 74,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  3099,
                  3146
                ],
                "loc": {
                  "start": {
                    "line": 72,
                    "column": 9
                  },
                  "end": {
                    "line": 74,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                3094,
                3146
              ],
              "loc": {
                "start": {
                  "line": 72,
                  "column": 4
                },
                "end": {
                  "line": 74,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Returns the list of units uniquely defining the value of this TemporalAmount.\n     * The list of {@link TemporalUnits} is defined by the implementation class.\n     * The list is a snapshot of the units at the time {@link getUnits}\n     * is called and is not mutable.\n     * The units are ordered from longest duration to the shortest duration\n     * of the unit.\n     *\n     * @implSpec\n     * The list of units completely and uniquely represents the\n     * state of the object without omissions, overlaps or duplication.\n     * The units are in order from longest duration to shortest.\n     *\n     * @return {TemporalUnit[]} the List of {@link TemporalUnits}; not null\n     ",
                  "range": [
                    2400,
                    3089
                  ],
                  "loc": {
                    "start": {
                      "line": 57,
                      "column": 4
                    },
                    "end": {
                      "line": 71,
                      "column": 7
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Adds to the specified temporal object.\n     *\n     * Adds the amount to the specified temporal object using the logic\n     * encapsulated in the implementing class.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#plus}:\n     * <pre>\n     *   // These two lines are equivalent, but the second approach is recommended\n     *   dateTime = amount.addTo(dateTime);\n     *   dateTime = dateTime.plus(adder);\n     * </pre>\n     * It is recommended to use the second approach, {@link plus},\n     * as it is a lot clearer to read in code.\n     *\n     * @implSpec\n     * The implementation must take the input object and add to it.\n     * The implementation defines the logic of the addition and is responsible for\n     * documenting that logic. It may use any method on {@link Temporal} to\n     * query the temporal object and perform the addition.\n     * The returned object must have the same observable type as the input object\n     *\n     * The input object must not be altered.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {Temporal} temporal - the temporal object to add the amount to, not null\n     * @return {Temporal} an object of the same observable type with the addition made, not null\n     * @throws DateTimeException if unable to add\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
                  "range": [
                    3156,
                    5126
                  ],
                  "loc": {
                    "start": {
                      "line": 76,
                      "column": 4
                    },
                    "end": {
                      "line": 115,
                      "column": 7
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " eslint-disable-next-line no-unused-vars",
                  "range": [
                    5131,
                    5173
                  ],
                  "loc": {
                    "start": {
                      "line": 116,
                      "column": 4
                    },
                    "end": {
                      "line": 116,
                      "column": 46
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "addTo",
                "range": [
                  5178,
                  5183
                ],
                "loc": {
                  "start": {
                    "line": 117,
                    "column": 4
                  },
                  "end": {
                    "line": 117,
                    "column": 9
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "temporal",
                    "range": [
                      5184,
                      5192
                    ],
                    "loc": {
                      "start": {
                        "line": 117,
                        "column": 10
                      },
                      "end": {
                        "line": 117,
                        "column": 18
                      }
                    }
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "abstractMethodFail",
                          "range": [
                            5204,
                            5222
                          ],
                          "loc": {
                            "start": {
                              "line": 118,
                              "column": 8
                            },
                            "end": {
                              "line": 118,
                              "column": 26
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "addTo",
                            "raw": "'addTo'",
                            "range": [
                              5223,
                              5230
                            ],
                            "loc": {
                              "start": {
                                "line": 118,
                                "column": 27
                              },
                              "end": {
                                "line": 118,
                                "column": 34
                              }
                            }
                          }
                        ],
                        "range": [
                          5204,
                          5231
                        ],
                        "loc": {
                          "start": {
                            "line": 118,
                            "column": 8
                          },
                          "end": {
                            "line": 118,
                            "column": 35
                          }
                        }
                      },
                      "range": [
                        5204,
                        5232
                      ],
                      "loc": {
                        "start": {
                          "line": 118,
                          "column": 8
                        },
                        "end": {
                          "line": 118,
                          "column": 36
                        }
                      }
                    }
                  ],
                  "range": [
                    5194,
                    5238
                  ],
                  "loc": {
                    "start": {
                      "line": 117,
                      "column": 20
                    },
                    "end": {
                      "line": 119,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  5183,
                  5238
                ],
                "loc": {
                  "start": {
                    "line": 117,
                    "column": 9
                  },
                  "end": {
                    "line": 119,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                5178,
                5238
              ],
              "loc": {
                "start": {
                  "line": 117,
                  "column": 4
                },
                "end": {
                  "line": 119,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Adds to the specified temporal object.\n     *\n     * Adds the amount to the specified temporal object using the logic\n     * encapsulated in the implementing class.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#plus}:\n     * <pre>\n     *   // These two lines are equivalent, but the second approach is recommended\n     *   dateTime = amount.addTo(dateTime);\n     *   dateTime = dateTime.plus(adder);\n     * </pre>\n     * It is recommended to use the second approach, {@link plus},\n     * as it is a lot clearer to read in code.\n     *\n     * @implSpec\n     * The implementation must take the input object and add to it.\n     * The implementation defines the logic of the addition and is responsible for\n     * documenting that logic. It may use any method on {@link Temporal} to\n     * query the temporal object and perform the addition.\n     * The returned object must have the same observable type as the input object\n     *\n     * The input object must not be altered.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {Temporal} temporal - the temporal object to add the amount to, not null\n     * @return {Temporal} an object of the same observable type with the addition made, not null\n     * @throws DateTimeException if unable to add\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
                  "range": [
                    3156,
                    5126
                  ],
                  "loc": {
                    "start": {
                      "line": 76,
                      "column": 4
                    },
                    "end": {
                      "line": 115,
                      "column": 7
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " eslint-disable-next-line no-unused-vars",
                  "range": [
                    5131,
                    5173
                  ],
                  "loc": {
                    "start": {
                      "line": 116,
                      "column": 4
                    },
                    "end": {
                      "line": 116,
                      "column": 46
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Subtracts this object from the specified temporal object.\n     *\n     * Subtracts the amount from the specified temporal object using the logic\n     * encapsulated in the implementing class.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#minus}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   dateTime = amount.subtractFrom(dateTime);\n     *   dateTime = dateTime.minus(amount);\n     * </pre>\n     * It is recommended to use the second approach, {@link minus},\n     * as it is a lot clearer to read in code.\n     *\n     * @implSpec\n     * The implementation must take the input object and subtract from it.\n     * The implementation defines the logic of the subtraction and is responsible for\n     * documenting that logic. It may use any method on {@link Temporal} to\n     * query the temporal object and perform the subtraction.\n     * The returned object must have the same observable type as the input object\n     *\n     * The input object must not be altered.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {Temporal} temporal - the temporal object to subtract the amount from, not null\n     * @return {Temporal} an object of the same observable type with the subtraction made, not null\n     * @throws DateTimeException if unable to subtract\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
                  "range": [
                    5248,
                    7283
                  ],
                  "loc": {
                    "start": {
                      "line": 121,
                      "column": 4
                    },
                    "end": {
                      "line": 160,
                      "column": 7
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " eslint-disable-next-line no-unused-vars",
                  "range": [
                    7288,
                    7330
                  ],
                  "loc": {
                    "start": {
                      "line": 161,
                      "column": 4
                    },
                    "end": {
                      "line": 161,
                      "column": 46
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "subtractFrom",
                "range": [
                  7335,
                  7347
                ],
                "loc": {
                  "start": {
                    "line": 162,
                    "column": 4
                  },
                  "end": {
                    "line": 162,
                    "column": 16
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "temporal",
                    "range": [
                      7348,
                      7356
                    ],
                    "loc": {
                      "start": {
                        "line": 162,
                        "column": 17
                      },
                      "end": {
                        "line": 162,
                        "column": 25
                      }
                    }
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "abstractMethodFail",
                          "range": [
                            7368,
                            7386
                          ],
                          "loc": {
                            "start": {
                              "line": 163,
                              "column": 8
                            },
                            "end": {
                              "line": 163,
                              "column": 26
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "subtractFrom",
                            "raw": "'subtractFrom'",
                            "range": [
                              7387,
                              7401
                            ],
                            "loc": {
                              "start": {
                                "line": 163,
                                "column": 27
                              },
                              "end": {
                                "line": 163,
                                "column": 41
                              }
                            }
                          }
                        ],
                        "range": [
                          7368,
                          7402
                        ],
                        "loc": {
                          "start": {
                            "line": 163,
                            "column": 8
                          },
                          "end": {
                            "line": 163,
                            "column": 42
                          }
                        }
                      },
                      "range": [
                        7368,
                        7403
                      ],
                      "loc": {
                        "start": {
                          "line": 163,
                          "column": 8
                        },
                        "end": {
                          "line": 163,
                          "column": 43
                        }
                      }
                    }
                  ],
                  "range": [
                    7358,
                    7409
                  ],
                  "loc": {
                    "start": {
                      "line": 162,
                      "column": 27
                    },
                    "end": {
                      "line": 164,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  7347,
                  7409
                ],
                "loc": {
                  "start": {
                    "line": 162,
                    "column": 16
                  },
                  "end": {
                    "line": 164,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                7335,
                7409
              ],
              "loc": {
                "start": {
                  "line": 162,
                  "column": 4
                },
                "end": {
                  "line": 164,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Subtracts this object from the specified temporal object.\n     *\n     * Subtracts the amount from the specified temporal object using the logic\n     * encapsulated in the implementing class.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#minus}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   dateTime = amount.subtractFrom(dateTime);\n     *   dateTime = dateTime.minus(amount);\n     * </pre>\n     * It is recommended to use the second approach, {@link minus},\n     * as it is a lot clearer to read in code.\n     *\n     * @implSpec\n     * The implementation must take the input object and subtract from it.\n     * The implementation defines the logic of the subtraction and is responsible for\n     * documenting that logic. It may use any method on {@link Temporal} to\n     * query the temporal object and perform the subtraction.\n     * The returned object must have the same observable type as the input object\n     *\n     * The input object must not be altered.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {Temporal} temporal - the temporal object to subtract the amount from, not null\n     * @return {Temporal} an object of the same observable type with the subtraction made, not null\n     * @throws DateTimeException if unable to subtract\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
                  "range": [
                    5248,
                    7283
                  ],
                  "loc": {
                    "start": {
                      "line": 121,
                      "column": 4
                    },
                    "end": {
                      "line": 160,
                      "column": 7
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " eslint-disable-next-line no-unused-vars",
                  "range": [
                    7288,
                    7330
                  ],
                  "loc": {
                    "start": {
                      "line": 161,
                      "column": 4
                    },
                    "end": {
                      "line": 161,
                      "column": 46
                    }
                  }
                }
              ],
              "static": false
            }
          ],
          "range": [
            1491,
            7416
          ],
          "loc": {
            "start": {
              "line": 35,
              "column": 28
            },
            "end": {
              "line": 166,
              "column": 1
            }
          }
        },
        "range": [
          1470,
          7416
        ],
        "loc": {
          "start": {
            "line": 35,
            "column": 7
          },
          "end": {
            "line": 166,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Framework-level interface defining an amount of time, such as\n * \"6 hours\", \"8 days\" or \"2 years and 3 months\".\n *\n * This is the base interface type for amounts of time.\n * An amount is distinct from a date or time-of-day in that it is not tied\n * to any specific point on the time-line.\n *\n * The amount can be thought of as a {@link Map} of {@link TemporalUnit} to\n * `long`, exposed via {@link getUnits} and {@link get}.\n * A simple case might have a single unit-value pair, such as \"6 hours\".\n * A more complex case may have multiple unit-value pairs, such as\n * \"7 years, 3 months and 5 days\".\n *\n * There are two common implementations.\n * {@link Period} is a date-based implementation, storing years, months and days.\n * {@link Duration} is a time-based implementation, storing seconds and nanoseconds,\n * but providing some access using other duration based units such as minutes,\n * hours and fixed 24-hour days.\n *\n * This interface is a framework-level interface that should not be widely\n * used in application code. Instead, applications should create and pass\n * around instances of concrete types, such as {@link Period} and {@link Duration}.\n *\n * @interface\n ",
            "range": [
              276,
              1462
            ],
            "loc": {
              "start": {
                "line": 9,
                "column": 0
              },
              "end": {
                "line": 34,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": []
      },
      "specifiers": [],
      "source": null,
      "range": [
        1463,
        7416
      ],
      "loc": {
        "start": {
          "line": 35,
          "column": 0
        },
        "end": {
          "line": 166,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Framework-level interface defining an amount of time, such as\n * \"6 hours\", \"8 days\" or \"2 years and 3 months\".\n *\n * This is the base interface type for amounts of time.\n * An amount is distinct from a date or time-of-day in that it is not tied\n * to any specific point on the time-line.\n *\n * The amount can be thought of as a {@link Map} of {@link TemporalUnit} to\n * `long`, exposed via {@link getUnits} and {@link get}.\n * A simple case might have a single unit-value pair, such as \"6 hours\".\n * A more complex case may have multiple unit-value pairs, such as\n * \"7 years, 3 months and 5 days\".\n *\n * There are two common implementations.\n * {@link Period} is a date-based implementation, storing years, months and days.\n * {@link Duration} is a time-based implementation, storing seconds and nanoseconds,\n * but providing some access using other duration based units such as minutes,\n * hours and fixed 24-hour days.\n *\n * This interface is a framework-level interface that should not be widely\n * used in application code. Instead, applications should create and pass\n * around instances of concrete types, such as {@link Period} and {@link Duration}.\n *\n * @interface\n ",
          "range": [
            276,
            1462
          ],
          "loc": {
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 34,
              "column": 3
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    229,
    7416
  ],
  "loc": {
    "start": {
      "line": 7,
      "column": 0
    },
    "end": {
      "line": 166,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n ",
      "range": [
        0,
        227
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Framework-level interface defining an amount of time, such as\n * \"6 hours\", \"8 days\" or \"2 years and 3 months\".\n *\n * This is the base interface type for amounts of time.\n * An amount is distinct from a date or time-of-day in that it is not tied\n * to any specific point on the time-line.\n *\n * The amount can be thought of as a {@link Map} of {@link TemporalUnit} to\n * `long`, exposed via {@link getUnits} and {@link get}.\n * A simple case might have a single unit-value pair, such as \"6 hours\".\n * A more complex case may have multiple unit-value pairs, such as\n * \"7 years, 3 months and 5 days\".\n *\n * There are two common implementations.\n * {@link Period} is a date-based implementation, storing years, months and days.\n * {@link Duration} is a time-based implementation, storing seconds and nanoseconds,\n * but providing some access using other duration based units such as minutes,\n * hours and fixed 24-hour days.\n *\n * This interface is a framework-level interface that should not be widely\n * used in application code. Instead, applications should create and pass\n * around instances of concrete types, such as {@link Period} and {@link Duration}.\n *\n * @interface\n ",
      "range": [
        276,
        1462
      ],
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 34,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Returns the value of the requested unit.\n     * The units returned from {@link getUnits} uniquely define the\n     * value of the {@link TemporalAmount}.  A value must be returned\n     * for each unit listed in {@link getUnits}.\n     *\n     * @implSpec\n     * Implementations may declare support for units not listed by {@link getUnits}.\n     * Typically, the implementation would define additional units\n     * as conversions for the convenience of developers.\n     *\n     * @param {TemporalUnit} unit - the {@link TemporalUnit} for which to return the value\n     * @return {number} the long value of the unit\n     * @throws DateTimeException if a value for the unit cannot be obtained\n     * @throws UnsupportedTemporalTypeException if the {@link unit} is not supported\n     ",
      "range": [
        1497,
        2286
      ],
      "loc": {
        "start": {
          "line": 36,
          "column": 4
        },
        "end": {
          "line": 51,
          "column": 7
        }
      }
    },
    {
      "type": "Line",
      "value": " eslint-disable-next-line no-unused-vars",
      "range": [
        2291,
        2333
      ],
      "loc": {
        "start": {
          "line": 52,
          "column": 4
        },
        "end": {
          "line": 52,
          "column": 46
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Returns the list of units uniquely defining the value of this TemporalAmount.\n     * The list of {@link TemporalUnits} is defined by the implementation class.\n     * The list is a snapshot of the units at the time {@link getUnits}\n     * is called and is not mutable.\n     * The units are ordered from longest duration to the shortest duration\n     * of the unit.\n     *\n     * @implSpec\n     * The list of units completely and uniquely represents the\n     * state of the object without omissions, overlaps or duplication.\n     * The units are in order from longest duration to shortest.\n     *\n     * @return {TemporalUnit[]} the List of {@link TemporalUnits}; not null\n     ",
      "range": [
        2400,
        3089
      ],
      "loc": {
        "start": {
          "line": 57,
          "column": 4
        },
        "end": {
          "line": 71,
          "column": 7
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Adds to the specified temporal object.\n     *\n     * Adds the amount to the specified temporal object using the logic\n     * encapsulated in the implementing class.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#plus}:\n     * <pre>\n     *   // These two lines are equivalent, but the second approach is recommended\n     *   dateTime = amount.addTo(dateTime);\n     *   dateTime = dateTime.plus(adder);\n     * </pre>\n     * It is recommended to use the second approach, {@link plus},\n     * as it is a lot clearer to read in code.\n     *\n     * @implSpec\n     * The implementation must take the input object and add to it.\n     * The implementation defines the logic of the addition and is responsible for\n     * documenting that logic. It may use any method on {@link Temporal} to\n     * query the temporal object and perform the addition.\n     * The returned object must have the same observable type as the input object\n     *\n     * The input object must not be altered.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {Temporal} temporal - the temporal object to add the amount to, not null\n     * @return {Temporal} an object of the same observable type with the addition made, not null\n     * @throws DateTimeException if unable to add\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
      "range": [
        3156,
        5126
      ],
      "loc": {
        "start": {
          "line": 76,
          "column": 4
        },
        "end": {
          "line": 115,
          "column": 7
        }
      }
    },
    {
      "type": "Line",
      "value": " eslint-disable-next-line no-unused-vars",
      "range": [
        5131,
        5173
      ],
      "loc": {
        "start": {
          "line": 116,
          "column": 4
        },
        "end": {
          "line": 116,
          "column": 46
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Subtracts this object from the specified temporal object.\n     *\n     * Subtracts the amount from the specified temporal object using the logic\n     * encapsulated in the implementing class.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#minus}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   dateTime = amount.subtractFrom(dateTime);\n     *   dateTime = dateTime.minus(amount);\n     * </pre>\n     * It is recommended to use the second approach, {@link minus},\n     * as it is a lot clearer to read in code.\n     *\n     * @implSpec\n     * The implementation must take the input object and subtract from it.\n     * The implementation defines the logic of the subtraction and is responsible for\n     * documenting that logic. It may use any method on {@link Temporal} to\n     * query the temporal object and perform the subtraction.\n     * The returned object must have the same observable type as the input object\n     *\n     * The input object must not be altered.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {Temporal} temporal - the temporal object to subtract the amount from, not null\n     * @return {Temporal} an object of the same observable type with the subtraction made, not null\n     * @throws DateTimeException if unable to subtract\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
      "range": [
        5248,
        7283
      ],
      "loc": {
        "start": {
          "line": 121,
          "column": 4
        },
        "end": {
          "line": 160,
          "column": 7
        }
      }
    },
    {
      "type": "Line",
      "value": " eslint-disable-next-line no-unused-vars",
      "range": [
        7288,
        7330
      ],
      "loc": {
        "start": {
          "line": 161,
          "column": 4
        },
        "end": {
          "line": 161,
          "column": 46
        }
      }
    }
  ]
}