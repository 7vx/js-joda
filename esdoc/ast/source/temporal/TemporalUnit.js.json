{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "abstractMethodFail",
            "range": [
              237,
              255
            ],
            "loc": {
              "start": {
                "line": 7,
                "column": 8
              },
              "end": {
                "line": 7,
                "column": 26
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "abstractMethodFail",
            "range": [
              237,
              255
            ],
            "loc": {
              "start": {
                "line": 7,
                "column": 8
              },
              "end": {
                "line": 7,
                "column": 26
              }
            }
          },
          "range": [
            237,
            255
          ],
          "loc": {
            "start": {
              "line": 7,
              "column": 8
            },
            "end": {
              "line": 7,
              "column": 26
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../assert",
        "raw": "'../assert'",
        "range": [
          262,
          273
        ],
        "loc": {
          "start": {
            "line": 7,
            "column": 33
          },
          "end": {
            "line": 7,
            "column": 44
          }
        }
      },
      "range": [
        229,
        274
      ],
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 45
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n ",
          "range": [
            0,
            227
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * A unit of date-time, such as Days or Hours.\n *\n * Measurement of time is built on units, such as years, months, days, hours, minutes and seconds.\n * Implementations of this interface represent those units.\n *\n * An instance of this interface represents the unit itself, rather than an amount of the unit.\n * See {@link Period} for a class that represents an amount in terms of the common units.\n *\n * The most commonly used units are defined in {@link ChronoUnit}.\n * Further units are supplied in {@link IsoFields}.\n * Units can also be written by application code by implementing this interface.\n *\n * The unit works using double dispatch. Client code calls methods on a date-time like\n * {@link LocalDateTime} which check if the unit is a {@link ChronoUnit}.\n * If it is, then the date-time must handle it.\n * Otherwise, the method call is re-dispatched to the matching method in this interface.\n *\n * @interface\n ",
          "range": [
            276,
            1202
          ],
          "loc": {
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 28,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "ClassDeclaration",
        "id": {
          "type": "Identifier",
          "name": "TemporalUnit",
          "range": [
            1216,
            1228
          ],
          "loc": {
            "start": {
              "line": 29,
              "column": 13
            },
            "end": {
              "line": 29,
              "column": 25
            }
          }
        },
        "superClass": null,
        "body": {
          "type": "ClassBody",
          "body": [
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "duration",
                "range": [
                  1920,
                  1928
                ],
                "loc": {
                  "start": {
                    "line": 44,
                    "column": 4
                  },
                  "end": {
                    "line": 44,
                    "column": 12
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "abstractMethodFail",
                          "range": [
                            1941,
                            1959
                          ],
                          "loc": {
                            "start": {
                              "line": 45,
                              "column": 8
                            },
                            "end": {
                              "line": 45,
                              "column": 26
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "duration",
                            "raw": "'duration'",
                            "range": [
                              1960,
                              1970
                            ],
                            "loc": {
                              "start": {
                                "line": 45,
                                "column": 27
                              },
                              "end": {
                                "line": 45,
                                "column": 37
                              }
                            }
                          }
                        ],
                        "range": [
                          1941,
                          1971
                        ],
                        "loc": {
                          "start": {
                            "line": 45,
                            "column": 8
                          },
                          "end": {
                            "line": 45,
                            "column": 38
                          }
                        }
                      },
                      "range": [
                        1941,
                        1972
                      ],
                      "loc": {
                        "start": {
                          "line": 45,
                          "column": 8
                        },
                        "end": {
                          "line": 45,
                          "column": 39
                        }
                      }
                    }
                  ],
                  "range": [
                    1931,
                    1978
                  ],
                  "loc": {
                    "start": {
                      "line": 44,
                      "column": 15
                    },
                    "end": {
                      "line": 46,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  1928,
                  1978
                ],
                "loc": {
                  "start": {
                    "line": 44,
                    "column": 12
                  },
                  "end": {
                    "line": 46,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                1920,
                1978
              ],
              "loc": {
                "start": {
                  "line": 44,
                  "column": 4
                },
                "end": {
                  "line": 46,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Gets the duration of this unit, which may be an estimate.\n     *\n     * All units return a duration measured in standard nanoseconds from this method.\n     * The duration will be positive and non-zero.\n     * For example, an hour has a duration of `60 * 60 * 1,000,000,000ns`.\n     *\n     * Some units may return an accurate duration while others return an estimate.\n     * For example, days have an estimated duration due to the possibility of\n     * daylight saving time changes.\n     * To determine if the duration is an estimate, use {@link isDurationEstimated}.\n     *\n     * @return {Duration} the duration of this unit, which may be an estimate, not null\n     ",
                  "range": [
                    1235,
                    1915
                  ],
                  "loc": {
                    "start": {
                      "line": 30,
                      "column": 4
                    },
                    "end": {
                      "line": 43,
                      "column": 7
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Checks if the duration of the unit is an estimate.\n     *\n     * All units have a duration, however the duration is not always accurate.\n     * For example, days have an estimated duration due to the possibility of\n     * daylight saving time changes.\n     * This method returns true if the duration is an estimate and false if it is\n     * accurate. Note that accurate/estimated ignores leap seconds.\n     *\n     * @return {boolean} true if the duration is estimated, false if accurate\n     ",
                  "range": [
                    1984,
                    2489
                  ],
                  "loc": {
                    "start": {
                      "line": 48,
                      "column": 4
                    },
                    "end": {
                      "line": 58,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "isDurationEstimated",
                "range": [
                  2494,
                  2513
                ],
                "loc": {
                  "start": {
                    "line": 59,
                    "column": 4
                  },
                  "end": {
                    "line": 59,
                    "column": 23
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "abstractMethodFail",
                          "range": [
                            2526,
                            2544
                          ],
                          "loc": {
                            "start": {
                              "line": 60,
                              "column": 8
                            },
                            "end": {
                              "line": 60,
                              "column": 26
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "isDurationEstimated",
                            "raw": "'isDurationEstimated'",
                            "range": [
                              2545,
                              2566
                            ],
                            "loc": {
                              "start": {
                                "line": 60,
                                "column": 27
                              },
                              "end": {
                                "line": 60,
                                "column": 48
                              }
                            }
                          }
                        ],
                        "range": [
                          2526,
                          2567
                        ],
                        "loc": {
                          "start": {
                            "line": 60,
                            "column": 8
                          },
                          "end": {
                            "line": 60,
                            "column": 49
                          }
                        }
                      },
                      "range": [
                        2526,
                        2568
                      ],
                      "loc": {
                        "start": {
                          "line": 60,
                          "column": 8
                        },
                        "end": {
                          "line": 60,
                          "column": 50
                        }
                      }
                    }
                  ],
                  "range": [
                    2516,
                    2574
                  ],
                  "loc": {
                    "start": {
                      "line": 59,
                      "column": 26
                    },
                    "end": {
                      "line": 61,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  2513,
                  2574
                ],
                "loc": {
                  "start": {
                    "line": 59,
                    "column": 23
                  },
                  "end": {
                    "line": 61,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                2494,
                2574
              ],
              "loc": {
                "start": {
                  "line": 59,
                  "column": 4
                },
                "end": {
                  "line": 61,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Checks if the duration of the unit is an estimate.\n     *\n     * All units have a duration, however the duration is not always accurate.\n     * For example, days have an estimated duration due to the possibility of\n     * daylight saving time changes.\n     * This method returns true if the duration is an estimate and false if it is\n     * accurate. Note that accurate/estimated ignores leap seconds.\n     *\n     * @return {boolean} true if the duration is estimated, false if accurate\n     ",
                  "range": [
                    1984,
                    2489
                  ],
                  "loc": {
                    "start": {
                      "line": 48,
                      "column": 4
                    },
                    "end": {
                      "line": 58,
                      "column": 7
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Checks if this unit is date-based.\n     *\n     * @return {boolean} true if date-based\n     ",
                  "range": [
                    2580,
                    2684
                  ],
                  "loc": {
                    "start": {
                      "line": 63,
                      "column": 4
                    },
                    "end": {
                      "line": 67,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "isDateBased",
                "range": [
                  2689,
                  2700
                ],
                "loc": {
                  "start": {
                    "line": 68,
                    "column": 4
                  },
                  "end": {
                    "line": 68,
                    "column": 15
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "abstractMethodFail",
                          "range": [
                            2713,
                            2731
                          ],
                          "loc": {
                            "start": {
                              "line": 69,
                              "column": 8
                            },
                            "end": {
                              "line": 69,
                              "column": 26
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "isDateBased",
                            "raw": "'isDateBased'",
                            "range": [
                              2732,
                              2745
                            ],
                            "loc": {
                              "start": {
                                "line": 69,
                                "column": 27
                              },
                              "end": {
                                "line": 69,
                                "column": 40
                              }
                            }
                          }
                        ],
                        "range": [
                          2713,
                          2746
                        ],
                        "loc": {
                          "start": {
                            "line": 69,
                            "column": 8
                          },
                          "end": {
                            "line": 69,
                            "column": 41
                          }
                        }
                      },
                      "range": [
                        2713,
                        2747
                      ],
                      "loc": {
                        "start": {
                          "line": 69,
                          "column": 8
                        },
                        "end": {
                          "line": 69,
                          "column": 42
                        }
                      }
                    }
                  ],
                  "range": [
                    2703,
                    2753
                  ],
                  "loc": {
                    "start": {
                      "line": 68,
                      "column": 18
                    },
                    "end": {
                      "line": 70,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  2700,
                  2753
                ],
                "loc": {
                  "start": {
                    "line": 68,
                    "column": 15
                  },
                  "end": {
                    "line": 70,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                2689,
                2753
              ],
              "loc": {
                "start": {
                  "line": 68,
                  "column": 4
                },
                "end": {
                  "line": 70,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Checks if this unit is date-based.\n     *\n     * @return {boolean} true if date-based\n     ",
                  "range": [
                    2580,
                    2684
                  ],
                  "loc": {
                    "start": {
                      "line": 63,
                      "column": 4
                    },
                    "end": {
                      "line": 67,
                      "column": 7
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Checks if this unit is time-based.\n     *\n     * @return {boolean} true if time-based\n     ",
                  "range": [
                    2759,
                    2863
                  ],
                  "loc": {
                    "start": {
                      "line": 72,
                      "column": 4
                    },
                    "end": {
                      "line": 76,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "isTimeBased",
                "range": [
                  2868,
                  2879
                ],
                "loc": {
                  "start": {
                    "line": 77,
                    "column": 4
                  },
                  "end": {
                    "line": 77,
                    "column": 15
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "abstractMethodFail",
                          "range": [
                            2892,
                            2910
                          ],
                          "loc": {
                            "start": {
                              "line": 78,
                              "column": 8
                            },
                            "end": {
                              "line": 78,
                              "column": 26
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "isTimeBased",
                            "raw": "'isTimeBased'",
                            "range": [
                              2911,
                              2924
                            ],
                            "loc": {
                              "start": {
                                "line": 78,
                                "column": 27
                              },
                              "end": {
                                "line": 78,
                                "column": 40
                              }
                            }
                          }
                        ],
                        "range": [
                          2892,
                          2925
                        ],
                        "loc": {
                          "start": {
                            "line": 78,
                            "column": 8
                          },
                          "end": {
                            "line": 78,
                            "column": 41
                          }
                        }
                      },
                      "range": [
                        2892,
                        2926
                      ],
                      "loc": {
                        "start": {
                          "line": 78,
                          "column": 8
                        },
                        "end": {
                          "line": 78,
                          "column": 42
                        }
                      }
                    }
                  ],
                  "range": [
                    2882,
                    2932
                  ],
                  "loc": {
                    "start": {
                      "line": 77,
                      "column": 18
                    },
                    "end": {
                      "line": 79,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  2879,
                  2932
                ],
                "loc": {
                  "start": {
                    "line": 77,
                    "column": 15
                  },
                  "end": {
                    "line": 79,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                2868,
                2932
              ],
              "loc": {
                "start": {
                  "line": 77,
                  "column": 4
                },
                "end": {
                  "line": 79,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Checks if this unit is time-based.\n     *\n     * @return {boolean} true if time-based\n     ",
                  "range": [
                    2759,
                    2863
                  ],
                  "loc": {
                    "start": {
                      "line": 72,
                      "column": 4
                    },
                    "end": {
                      "line": 76,
                      "column": 7
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "Line",
                  "value": "-----------------------------------------------------------------------",
                  "range": [
                    2938,
                    3011
                  ],
                  "loc": {
                    "start": {
                      "line": 81,
                      "column": 4
                    },
                    "end": {
                      "line": 81,
                      "column": 77
                    }
                  }
                },
                {
                  "type": "Block",
                  "value": "*\n     * Checks if this unit is supported by the specified temporal object.\n     *\n     * This checks that the implementing date-time can add/subtract this unit.\n     * This can be used to avoid throwing an exception.\n     *\n     * @param {Temporal} temporal  the temporal object to check, not null\n     * @return {boolean} true if the unit is supported\n     ",
                  "range": [
                    3016,
                    3379
                  ],
                  "loc": {
                    "start": {
                      "line": 82,
                      "column": 4
                    },
                    "end": {
                      "line": 90,
                      "column": 7
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " eslint-disable-next-line no-unused-vars",
                  "range": [
                    3384,
                    3426
                  ],
                  "loc": {
                    "start": {
                      "line": 91,
                      "column": 4
                    },
                    "end": {
                      "line": 91,
                      "column": 46
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "isSupportedBy",
                "range": [
                  3431,
                  3444
                ],
                "loc": {
                  "start": {
                    "line": 92,
                    "column": 4
                  },
                  "end": {
                    "line": 92,
                    "column": 17
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "temporal",
                    "range": [
                      3445,
                      3453
                    ],
                    "loc": {
                      "start": {
                        "line": 92,
                        "column": 18
                      },
                      "end": {
                        "line": 92,
                        "column": 26
                      }
                    }
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "abstractMethodFail",
                          "range": [
                            3465,
                            3483
                          ],
                          "loc": {
                            "start": {
                              "line": 93,
                              "column": 8
                            },
                            "end": {
                              "line": 93,
                              "column": 26
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "isSupportedBy",
                            "raw": "'isSupportedBy'",
                            "range": [
                              3484,
                              3499
                            ],
                            "loc": {
                              "start": {
                                "line": 93,
                                "column": 27
                              },
                              "end": {
                                "line": 93,
                                "column": 42
                              }
                            }
                          }
                        ],
                        "range": [
                          3465,
                          3500
                        ],
                        "loc": {
                          "start": {
                            "line": 93,
                            "column": 8
                          },
                          "end": {
                            "line": 93,
                            "column": 43
                          }
                        }
                      },
                      "range": [
                        3465,
                        3501
                      ],
                      "loc": {
                        "start": {
                          "line": 93,
                          "column": 8
                        },
                        "end": {
                          "line": 93,
                          "column": 44
                        }
                      }
                    }
                  ],
                  "range": [
                    3455,
                    3507
                  ],
                  "loc": {
                    "start": {
                      "line": 92,
                      "column": 28
                    },
                    "end": {
                      "line": 94,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  3444,
                  3507
                ],
                "loc": {
                  "start": {
                    "line": 92,
                    "column": 17
                  },
                  "end": {
                    "line": 94,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                3431,
                3507
              ],
              "loc": {
                "start": {
                  "line": 92,
                  "column": 4
                },
                "end": {
                  "line": 94,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Line",
                  "value": "-----------------------------------------------------------------------",
                  "range": [
                    2938,
                    3011
                  ],
                  "loc": {
                    "start": {
                      "line": 81,
                      "column": 4
                    },
                    "end": {
                      "line": 81,
                      "column": 77
                    }
                  }
                },
                {
                  "type": "Block",
                  "value": "*\n     * Checks if this unit is supported by the specified temporal object.\n     *\n     * This checks that the implementing date-time can add/subtract this unit.\n     * This can be used to avoid throwing an exception.\n     *\n     * @param {Temporal} temporal  the temporal object to check, not null\n     * @return {boolean} true if the unit is supported\n     ",
                  "range": [
                    3016,
                    3379
                  ],
                  "loc": {
                    "start": {
                      "line": 82,
                      "column": 4
                    },
                    "end": {
                      "line": 90,
                      "column": 7
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " eslint-disable-next-line no-unused-vars",
                  "range": [
                    3384,
                    3426
                  ],
                  "loc": {
                    "start": {
                      "line": 91,
                      "column": 4
                    },
                    "end": {
                      "line": 91,
                      "column": 46
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Returns a copy of the specified temporal object with the specified period added.\n     *\n     * The period added is a multiple of this unit. For example, this method\n     * could be used to add \"3 days\" to a date by calling this method on the\n     * instance representing \"days\", passing the date and the period \"3\".\n     * The period to be added may be negative, which is equivalent to subtraction.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#plus}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisUnit.doPlus(temporal);\n     *   temporal = temporal.plus(thisUnit);\n     * </pre>\n     * It is recommended to use the second approach, {@link plus},\n     * as it is a lot clearer to read in code.\n     *\n     * Implementations should perform any queries or calculations using the units\n     * available in {@link ChronoUnit} or the fields available in {@link ChronoField}.\n     * If the field is not supported a {@link DateTimeException} must be thrown.\n     *\n     * Implementations must not alter the specified temporal object.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable implementations.\n     *\n     * @param {Temporal} dateTime  the temporal object to adjust, not null\n     * @param {number} periodToAdd  the period of this unit to add, positive or negative\n     * @return {Temporal} the adjusted temporal object, not null\n     * @throws DateTimeException if the period cannot be added\n     ",
                  "range": [
                    3513,
                    5204
                  ],
                  "loc": {
                    "start": {
                      "line": 96,
                      "column": 4
                    },
                    "end": {
                      "line": 127,
                      "column": 7
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " eslint-disable-next-line no-unused-vars",
                  "range": [
                    5209,
                    5251
                  ],
                  "loc": {
                    "start": {
                      "line": 128,
                      "column": 4
                    },
                    "end": {
                      "line": 128,
                      "column": 46
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "addTo",
                "range": [
                  5256,
                  5261
                ],
                "loc": {
                  "start": {
                    "line": 129,
                    "column": 4
                  },
                  "end": {
                    "line": 129,
                    "column": 9
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "dateTime",
                    "range": [
                      5262,
                      5270
                    ],
                    "loc": {
                      "start": {
                        "line": 129,
                        "column": 10
                      },
                      "end": {
                        "line": 129,
                        "column": 18
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "periodToAdd",
                    "range": [
                      5272,
                      5283
                    ],
                    "loc": {
                      "start": {
                        "line": 129,
                        "column": 20
                      },
                      "end": {
                        "line": 129,
                        "column": 31
                      }
                    }
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "abstractMethodFail",
                          "range": [
                            5295,
                            5313
                          ],
                          "loc": {
                            "start": {
                              "line": 130,
                              "column": 8
                            },
                            "end": {
                              "line": 130,
                              "column": 26
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "addTo",
                            "raw": "'addTo'",
                            "range": [
                              5314,
                              5321
                            ],
                            "loc": {
                              "start": {
                                "line": 130,
                                "column": 27
                              },
                              "end": {
                                "line": 130,
                                "column": 34
                              }
                            }
                          }
                        ],
                        "range": [
                          5295,
                          5322
                        ],
                        "loc": {
                          "start": {
                            "line": 130,
                            "column": 8
                          },
                          "end": {
                            "line": 130,
                            "column": 35
                          }
                        }
                      },
                      "range": [
                        5295,
                        5323
                      ],
                      "loc": {
                        "start": {
                          "line": 130,
                          "column": 8
                        },
                        "end": {
                          "line": 130,
                          "column": 36
                        }
                      }
                    }
                  ],
                  "range": [
                    5285,
                    5329
                  ],
                  "loc": {
                    "start": {
                      "line": 129,
                      "column": 33
                    },
                    "end": {
                      "line": 131,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  5261,
                  5329
                ],
                "loc": {
                  "start": {
                    "line": 129,
                    "column": 9
                  },
                  "end": {
                    "line": 131,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                5256,
                5329
              ],
              "loc": {
                "start": {
                  "line": 129,
                  "column": 4
                },
                "end": {
                  "line": 131,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Returns a copy of the specified temporal object with the specified period added.\n     *\n     * The period added is a multiple of this unit. For example, this method\n     * could be used to add \"3 days\" to a date by calling this method on the\n     * instance representing \"days\", passing the date and the period \"3\".\n     * The period to be added may be negative, which is equivalent to subtraction.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#plus}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisUnit.doPlus(temporal);\n     *   temporal = temporal.plus(thisUnit);\n     * </pre>\n     * It is recommended to use the second approach, {@link plus},\n     * as it is a lot clearer to read in code.\n     *\n     * Implementations should perform any queries or calculations using the units\n     * available in {@link ChronoUnit} or the fields available in {@link ChronoField}.\n     * If the field is not supported a {@link DateTimeException} must be thrown.\n     *\n     * Implementations must not alter the specified temporal object.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable implementations.\n     *\n     * @param {Temporal} dateTime  the temporal object to adjust, not null\n     * @param {number} periodToAdd  the period of this unit to add, positive or negative\n     * @return {Temporal} the adjusted temporal object, not null\n     * @throws DateTimeException if the period cannot be added\n     ",
                  "range": [
                    3513,
                    5204
                  ],
                  "loc": {
                    "start": {
                      "line": 96,
                      "column": 4
                    },
                    "end": {
                      "line": 127,
                      "column": 7
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " eslint-disable-next-line no-unused-vars",
                  "range": [
                    5209,
                    5251
                  ],
                  "loc": {
                    "start": {
                      "line": 128,
                      "column": 4
                    },
                    "end": {
                      "line": 128,
                      "column": 46
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "Line",
                  "value": "-----------------------------------------------------------------------",
                  "range": [
                    5335,
                    5408
                  ],
                  "loc": {
                    "start": {
                      "line": 133,
                      "column": 4
                    },
                    "end": {
                      "line": 133,
                      "column": 77
                    }
                  }
                },
                {
                  "type": "Block",
                  "value": "*\n     * Calculates the period in terms of this unit between two temporal objects of the same type.\n     *\n     * This calculates the period between two temporals in terms of this unit.\n     * The start and end points are supplied as temporal objects and must be of the same type.\n     * The result will be negative if the end is before the start.\n     * For example, the period in hours between two temporal objects can be calculated\n     * using {@link HOURS.between}.\n     *\n     * The calculation returns a whole number, representing the number of complete units between the two temporals.\n     * For example, the period in hours between the times 11:30 and 13:29 will only b\n     * one hour as it is one minute short of two hours.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#until}:\n     * <pre>\n     *   // these two lines are equivalent\n     *   between = thisUnit.between(start, end);\n     *   between = start.until(end, thisUnit);\n     * </pre>\n     * The choice should be made based on which makes the code more readable.\n     *\n     * For example, this method allows the number of days between two dates to be calculated:\n     * <pre>\n     *   long daysBetween = DAYS.between(start, end);\n     *   // or alternatively\n     *   long daysBetween = start.until(end, DAYS);\n     * </pre>\n     * Implementations should perform any queries or calculations using the units available in\n     * {@link ChronoUnit} or the fields available in {@link ChronoField}.\n     * If the unit is not supported a DateTimeException must be thrown.\n     * Implementations must not alter the specified temporal objects.\n     *\n     * @param {Temporal} temporal1  the base temporal object, not null\n     * @param {Temporal} temporal2  the other temporal object, not null\n     * @return {number} the period between temporal1 and temporal2 in terms of this unit;\n     *  positive if temporal2 is later than temporal1, negative if earlier\n     * @throws DateTimeException if the period cannot be calculated\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
                  "range": [
                    5413,
                    7591
                  ],
                  "loc": {
                    "start": {
                      "line": 134,
                      "column": 4
                    },
                    "end": {
                      "line": 174,
                      "column": 7
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " eslint-disable-next-line no-unused-vars",
                  "range": [
                    7596,
                    7638
                  ],
                  "loc": {
                    "start": {
                      "line": 175,
                      "column": 4
                    },
                    "end": {
                      "line": 175,
                      "column": 46
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "between",
                "range": [
                  7643,
                  7650
                ],
                "loc": {
                  "start": {
                    "line": 176,
                    "column": 4
                  },
                  "end": {
                    "line": 176,
                    "column": 11
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "temporal1",
                    "range": [
                      7651,
                      7660
                    ],
                    "loc": {
                      "start": {
                        "line": 176,
                        "column": 12
                      },
                      "end": {
                        "line": 176,
                        "column": 21
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "temporal2",
                    "range": [
                      7662,
                      7671
                    ],
                    "loc": {
                      "start": {
                        "line": 176,
                        "column": 23
                      },
                      "end": {
                        "line": 176,
                        "column": 32
                      }
                    }
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "abstractMethodFail",
                          "range": [
                            7683,
                            7701
                          ],
                          "loc": {
                            "start": {
                              "line": 177,
                              "column": 8
                            },
                            "end": {
                              "line": 177,
                              "column": 26
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "between",
                            "raw": "'between'",
                            "range": [
                              7702,
                              7711
                            ],
                            "loc": {
                              "start": {
                                "line": 177,
                                "column": 27
                              },
                              "end": {
                                "line": 177,
                                "column": 36
                              }
                            }
                          }
                        ],
                        "range": [
                          7683,
                          7712
                        ],
                        "loc": {
                          "start": {
                            "line": 177,
                            "column": 8
                          },
                          "end": {
                            "line": 177,
                            "column": 37
                          }
                        }
                      },
                      "range": [
                        7683,
                        7713
                      ],
                      "loc": {
                        "start": {
                          "line": 177,
                          "column": 8
                        },
                        "end": {
                          "line": 177,
                          "column": 38
                        }
                      }
                    }
                  ],
                  "range": [
                    7673,
                    7719
                  ],
                  "loc": {
                    "start": {
                      "line": 176,
                      "column": 34
                    },
                    "end": {
                      "line": 178,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  7650,
                  7719
                ],
                "loc": {
                  "start": {
                    "line": 176,
                    "column": 11
                  },
                  "end": {
                    "line": 178,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                7643,
                7719
              ],
              "loc": {
                "start": {
                  "line": 176,
                  "column": 4
                },
                "end": {
                  "line": 178,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Line",
                  "value": "-----------------------------------------------------------------------",
                  "range": [
                    5335,
                    5408
                  ],
                  "loc": {
                    "start": {
                      "line": 133,
                      "column": 4
                    },
                    "end": {
                      "line": 133,
                      "column": 77
                    }
                  }
                },
                {
                  "type": "Block",
                  "value": "*\n     * Calculates the period in terms of this unit between two temporal objects of the same type.\n     *\n     * This calculates the period between two temporals in terms of this unit.\n     * The start and end points are supplied as temporal objects and must be of the same type.\n     * The result will be negative if the end is before the start.\n     * For example, the period in hours between two temporal objects can be calculated\n     * using {@link HOURS.between}.\n     *\n     * The calculation returns a whole number, representing the number of complete units between the two temporals.\n     * For example, the period in hours between the times 11:30 and 13:29 will only b\n     * one hour as it is one minute short of two hours.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#until}:\n     * <pre>\n     *   // these two lines are equivalent\n     *   between = thisUnit.between(start, end);\n     *   between = start.until(end, thisUnit);\n     * </pre>\n     * The choice should be made based on which makes the code more readable.\n     *\n     * For example, this method allows the number of days between two dates to be calculated:\n     * <pre>\n     *   long daysBetween = DAYS.between(start, end);\n     *   // or alternatively\n     *   long daysBetween = start.until(end, DAYS);\n     * </pre>\n     * Implementations should perform any queries or calculations using the units available in\n     * {@link ChronoUnit} or the fields available in {@link ChronoField}.\n     * If the unit is not supported a DateTimeException must be thrown.\n     * Implementations must not alter the specified temporal objects.\n     *\n     * @param {Temporal} temporal1  the base temporal object, not null\n     * @param {Temporal} temporal2  the other temporal object, not null\n     * @return {number} the period between temporal1 and temporal2 in terms of this unit;\n     *  positive if temporal2 is later than temporal1, negative if earlier\n     * @throws DateTimeException if the period cannot be calculated\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
                  "range": [
                    5413,
                    7591
                  ],
                  "loc": {
                    "start": {
                      "line": 134,
                      "column": 4
                    },
                    "end": {
                      "line": 174,
                      "column": 7
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " eslint-disable-next-line no-unused-vars",
                  "range": [
                    7596,
                    7638
                  ],
                  "loc": {
                    "start": {
                      "line": 175,
                      "column": 4
                    },
                    "end": {
                      "line": 175,
                      "column": 46
                    }
                  }
                }
              ],
              "static": false
            }
          ],
          "range": [
            1229,
            7722
          ],
          "loc": {
            "start": {
              "line": 29,
              "column": 26
            },
            "end": {
              "line": 180,
              "column": 1
            }
          }
        },
        "range": [
          1210,
          7722
        ],
        "loc": {
          "start": {
            "line": 29,
            "column": 7
          },
          "end": {
            "line": 180,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * A unit of date-time, such as Days or Hours.\n *\n * Measurement of time is built on units, such as years, months, days, hours, minutes and seconds.\n * Implementations of this interface represent those units.\n *\n * An instance of this interface represents the unit itself, rather than an amount of the unit.\n * See {@link Period} for a class that represents an amount in terms of the common units.\n *\n * The most commonly used units are defined in {@link ChronoUnit}.\n * Further units are supplied in {@link IsoFields}.\n * Units can also be written by application code by implementing this interface.\n *\n * The unit works using double dispatch. Client code calls methods on a date-time like\n * {@link LocalDateTime} which check if the unit is a {@link ChronoUnit}.\n * If it is, then the date-time must handle it.\n * Otherwise, the method call is re-dispatched to the matching method in this interface.\n *\n * @interface\n ",
            "range": [
              276,
              1202
            ],
            "loc": {
              "start": {
                "line": 9,
                "column": 0
              },
              "end": {
                "line": 28,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": []
      },
      "specifiers": [],
      "source": null,
      "range": [
        1203,
        7722
      ],
      "loc": {
        "start": {
          "line": 29,
          "column": 0
        },
        "end": {
          "line": 180,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * A unit of date-time, such as Days or Hours.\n *\n * Measurement of time is built on units, such as years, months, days, hours, minutes and seconds.\n * Implementations of this interface represent those units.\n *\n * An instance of this interface represents the unit itself, rather than an amount of the unit.\n * See {@link Period} for a class that represents an amount in terms of the common units.\n *\n * The most commonly used units are defined in {@link ChronoUnit}.\n * Further units are supplied in {@link IsoFields}.\n * Units can also be written by application code by implementing this interface.\n *\n * The unit works using double dispatch. Client code calls methods on a date-time like\n * {@link LocalDateTime} which check if the unit is a {@link ChronoUnit}.\n * If it is, then the date-time must handle it.\n * Otherwise, the method call is re-dispatched to the matching method in this interface.\n *\n * @interface\n ",
          "range": [
            276,
            1202
          ],
          "loc": {
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 28,
              "column": 3
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    229,
    7722
  ],
  "loc": {
    "start": {
      "line": 7,
      "column": 0
    },
    "end": {
      "line": 180,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n ",
      "range": [
        0,
        227
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * A unit of date-time, such as Days or Hours.\n *\n * Measurement of time is built on units, such as years, months, days, hours, minutes and seconds.\n * Implementations of this interface represent those units.\n *\n * An instance of this interface represents the unit itself, rather than an amount of the unit.\n * See {@link Period} for a class that represents an amount in terms of the common units.\n *\n * The most commonly used units are defined in {@link ChronoUnit}.\n * Further units are supplied in {@link IsoFields}.\n * Units can also be written by application code by implementing this interface.\n *\n * The unit works using double dispatch. Client code calls methods on a date-time like\n * {@link LocalDateTime} which check if the unit is a {@link ChronoUnit}.\n * If it is, then the date-time must handle it.\n * Otherwise, the method call is re-dispatched to the matching method in this interface.\n *\n * @interface\n ",
      "range": [
        276,
        1202
      ],
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 28,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Gets the duration of this unit, which may be an estimate.\n     *\n     * All units return a duration measured in standard nanoseconds from this method.\n     * The duration will be positive and non-zero.\n     * For example, an hour has a duration of `60 * 60 * 1,000,000,000ns`.\n     *\n     * Some units may return an accurate duration while others return an estimate.\n     * For example, days have an estimated duration due to the possibility of\n     * daylight saving time changes.\n     * To determine if the duration is an estimate, use {@link isDurationEstimated}.\n     *\n     * @return {Duration} the duration of this unit, which may be an estimate, not null\n     ",
      "range": [
        1235,
        1915
      ],
      "loc": {
        "start": {
          "line": 30,
          "column": 4
        },
        "end": {
          "line": 43,
          "column": 7
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Checks if the duration of the unit is an estimate.\n     *\n     * All units have a duration, however the duration is not always accurate.\n     * For example, days have an estimated duration due to the possibility of\n     * daylight saving time changes.\n     * This method returns true if the duration is an estimate and false if it is\n     * accurate. Note that accurate/estimated ignores leap seconds.\n     *\n     * @return {boolean} true if the duration is estimated, false if accurate\n     ",
      "range": [
        1984,
        2489
      ],
      "loc": {
        "start": {
          "line": 48,
          "column": 4
        },
        "end": {
          "line": 58,
          "column": 7
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Checks if this unit is date-based.\n     *\n     * @return {boolean} true if date-based\n     ",
      "range": [
        2580,
        2684
      ],
      "loc": {
        "start": {
          "line": 63,
          "column": 4
        },
        "end": {
          "line": 67,
          "column": 7
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Checks if this unit is time-based.\n     *\n     * @return {boolean} true if time-based\n     ",
      "range": [
        2759,
        2863
      ],
      "loc": {
        "start": {
          "line": 72,
          "column": 4
        },
        "end": {
          "line": 76,
          "column": 7
        }
      }
    },
    {
      "type": "Line",
      "value": "-----------------------------------------------------------------------",
      "range": [
        2938,
        3011
      ],
      "loc": {
        "start": {
          "line": 81,
          "column": 4
        },
        "end": {
          "line": 81,
          "column": 77
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Checks if this unit is supported by the specified temporal object.\n     *\n     * This checks that the implementing date-time can add/subtract this unit.\n     * This can be used to avoid throwing an exception.\n     *\n     * @param {Temporal} temporal  the temporal object to check, not null\n     * @return {boolean} true if the unit is supported\n     ",
      "range": [
        3016,
        3379
      ],
      "loc": {
        "start": {
          "line": 82,
          "column": 4
        },
        "end": {
          "line": 90,
          "column": 7
        }
      }
    },
    {
      "type": "Line",
      "value": " eslint-disable-next-line no-unused-vars",
      "range": [
        3384,
        3426
      ],
      "loc": {
        "start": {
          "line": 91,
          "column": 4
        },
        "end": {
          "line": 91,
          "column": 46
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Returns a copy of the specified temporal object with the specified period added.\n     *\n     * The period added is a multiple of this unit. For example, this method\n     * could be used to add \"3 days\" to a date by calling this method on the\n     * instance representing \"days\", passing the date and the period \"3\".\n     * The period to be added may be negative, which is equivalent to subtraction.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#plus}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisUnit.doPlus(temporal);\n     *   temporal = temporal.plus(thisUnit);\n     * </pre>\n     * It is recommended to use the second approach, {@link plus},\n     * as it is a lot clearer to read in code.\n     *\n     * Implementations should perform any queries or calculations using the units\n     * available in {@link ChronoUnit} or the fields available in {@link ChronoField}.\n     * If the field is not supported a {@link DateTimeException} must be thrown.\n     *\n     * Implementations must not alter the specified temporal object.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable implementations.\n     *\n     * @param {Temporal} dateTime  the temporal object to adjust, not null\n     * @param {number} periodToAdd  the period of this unit to add, positive or negative\n     * @return {Temporal} the adjusted temporal object, not null\n     * @throws DateTimeException if the period cannot be added\n     ",
      "range": [
        3513,
        5204
      ],
      "loc": {
        "start": {
          "line": 96,
          "column": 4
        },
        "end": {
          "line": 127,
          "column": 7
        }
      }
    },
    {
      "type": "Line",
      "value": " eslint-disable-next-line no-unused-vars",
      "range": [
        5209,
        5251
      ],
      "loc": {
        "start": {
          "line": 128,
          "column": 4
        },
        "end": {
          "line": 128,
          "column": 46
        }
      }
    },
    {
      "type": "Line",
      "value": "-----------------------------------------------------------------------",
      "range": [
        5335,
        5408
      ],
      "loc": {
        "start": {
          "line": 133,
          "column": 4
        },
        "end": {
          "line": 133,
          "column": 77
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Calculates the period in terms of this unit between two temporal objects of the same type.\n     *\n     * This calculates the period between two temporals in terms of this unit.\n     * The start and end points are supplied as temporal objects and must be of the same type.\n     * The result will be negative if the end is before the start.\n     * For example, the period in hours between two temporal objects can be calculated\n     * using {@link HOURS.between}.\n     *\n     * The calculation returns a whole number, representing the number of complete units between the two temporals.\n     * For example, the period in hours between the times 11:30 and 13:29 will only b\n     * one hour as it is one minute short of two hours.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#until}:\n     * <pre>\n     *   // these two lines are equivalent\n     *   between = thisUnit.between(start, end);\n     *   between = start.until(end, thisUnit);\n     * </pre>\n     * The choice should be made based on which makes the code more readable.\n     *\n     * For example, this method allows the number of days between two dates to be calculated:\n     * <pre>\n     *   long daysBetween = DAYS.between(start, end);\n     *   // or alternatively\n     *   long daysBetween = start.until(end, DAYS);\n     * </pre>\n     * Implementations should perform any queries or calculations using the units available in\n     * {@link ChronoUnit} or the fields available in {@link ChronoField}.\n     * If the unit is not supported a DateTimeException must be thrown.\n     * Implementations must not alter the specified temporal objects.\n     *\n     * @param {Temporal} temporal1  the base temporal object, not null\n     * @param {Temporal} temporal2  the other temporal object, not null\n     * @return {number} the period between temporal1 and temporal2 in terms of this unit;\n     *  positive if temporal2 is later than temporal1, negative if earlier\n     * @throws DateTimeException if the period cannot be calculated\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
      "range": [
        5413,
        7591
      ],
      "loc": {
        "start": {
          "line": 134,
          "column": 4
        },
        "end": {
          "line": 174,
          "column": 7
        }
      }
    },
    {
      "type": "Line",
      "value": " eslint-disable-next-line no-unused-vars",
      "range": [
        7596,
        7638
      ],
      "loc": {
        "start": {
          "line": 175,
          "column": 4
        },
        "end": {
          "line": 175,
          "column": 46
        }
      }
    }
  ]
}